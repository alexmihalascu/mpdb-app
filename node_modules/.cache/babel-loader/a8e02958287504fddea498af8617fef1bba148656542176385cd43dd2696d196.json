{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\nconst util = require('util');\nconst chmod = util.promisify(fs.chmod);\nconst unlink = util.promisify(fs.unlink);\nconst stat = util.promisify(fs.stat);\nconst move = require('@npmcli/move-file');\nconst pinflight = require('promise-inflight');\nmodule.exports = moveFile;\nfunction moveFile(src, dest) {\n  const isWindows = global.__CACACHE_TEST_FAKE_WINDOWS__ || process.platform === 'win32';\n\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return new Promise((resolve, reject) => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (isWindows && err.code === 'EPERM') {\n          // XXX This is a really weird way to handle this situation, as it\n          // results in the src file being deleted even though the dest\n          // might not exist.  Since we pretty much always write files to\n          // deterministic locations based on content hash, this is likely\n          // ok (or at worst, just ends in a future cache miss).  But it would\n          // be worth investigating at some time in the future if this is\n          // really what we want to do here.\n          return resolve();\n        } else if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n          return resolve();\n        } else return reject(err);\n      } else return resolve();\n    });\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return Promise.all([unlink(src), !isWindows && chmod(dest, '0444')]);\n  }).catch(() => {\n    return pinflight('cacache-move-file:' + dest, () => {\n      return stat(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err;\n        }\n        // file doesn't already exist! let's try a rename -> copy fallback\n        // only delete if it successfully copies\n        return move(src, dest);\n      });\n    });\n  });\n}","map":{"version":3,"names":["fs","require","util","chmod","promisify","unlink","stat","move","pinflight","module","exports","moveFile","src","dest","isWindows","global","__CACACHE_TEST_FAKE_WINDOWS__","process","platform","Promise","resolve","reject","link","err","code","then","all","catch"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/cacache/lib/util/move-file.js"],"sourcesContent":["'use strict'\n\nconst fs = require('fs')\nconst util = require('util')\nconst chmod = util.promisify(fs.chmod)\nconst unlink = util.promisify(fs.unlink)\nconst stat = util.promisify(fs.stat)\nconst move = require('@npmcli/move-file')\nconst pinflight = require('promise-inflight')\n\nmodule.exports = moveFile\n\nfunction moveFile (src, dest) {\n  const isWindows = global.__CACACHE_TEST_FAKE_WINDOWS__ ||\n    process.platform === 'win32'\n\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return new Promise((resolve, reject) => {\n    fs.link(src, dest, (err) => {\n      if (err) {\n        if (isWindows && err.code === 'EPERM') {\n          // XXX This is a really weird way to handle this situation, as it\n          // results in the src file being deleted even though the dest\n          // might not exist.  Since we pretty much always write files to\n          // deterministic locations based on content hash, this is likely\n          // ok (or at worst, just ends in a future cache miss).  But it would\n          // be worth investigating at some time in the future if this is\n          // really what we want to do here.\n          return resolve()\n        } else if (err.code === 'EEXIST' || err.code === 'EBUSY') {\n          // file already exists, so whatever\n          return resolve()\n        } else\n          return reject(err)\n      } else\n        return resolve()\n    })\n  })\n    .then(() => {\n      // content should never change for any reason, so make it read-only\n      return Promise.all([\n        unlink(src),\n        !isWindows && chmod(dest, '0444'),\n      ])\n    })\n    .catch(() => {\n      return pinflight('cacache-move-file:' + dest, () => {\n        return stat(dest).catch((err) => {\n          if (err.code !== 'ENOENT') {\n            // Something else is wrong here. Bail bail bail\n            throw err\n          }\n          // file doesn't already exist! let's try a rename -> copy fallback\n          // only delete if it successfully copies\n          return move(src, dest)\n        })\n      })\n    })\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,KAAK,GAAGD,IAAI,CAACE,SAAS,CAACJ,EAAE,CAACG,KAAK,CAAC;AACtC,MAAME,MAAM,GAAGH,IAAI,CAACE,SAAS,CAACJ,EAAE,CAACK,MAAM,CAAC;AACxC,MAAMC,IAAI,GAAGJ,IAAI,CAACE,SAAS,CAACJ,EAAE,CAACM,IAAI,CAAC;AACpC,MAAMC,IAAI,GAAGN,OAAO,CAAC,mBAAmB,CAAC;AACzC,MAAMO,SAAS,GAAGP,OAAO,CAAC,kBAAkB,CAAC;AAE7CQ,MAAM,CAACC,OAAO,GAAGC,QAAQ;AAEzB,SAASA,QAAQ,CAAEC,GAAG,EAAEC,IAAI,EAAE;EAC5B,MAAMC,SAAS,GAAGC,MAAM,CAACC,6BAA6B,IACpDC,OAAO,CAACC,QAAQ,KAAK,OAAO;;EAE9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCrB,EAAE,CAACsB,IAAI,CAACV,GAAG,EAAEC,IAAI,EAAGU,GAAG,IAAK;MAC1B,IAAIA,GAAG,EAAE;QACP,IAAIT,SAAS,IAAIS,GAAG,CAACC,IAAI,KAAK,OAAO,EAAE;UACrC;UACA;UACA;UACA;UACA;UACA;UACA;UACA,OAAOJ,OAAO,EAAE;QAClB,CAAC,MAAM,IAAIG,GAAG,CAACC,IAAI,KAAK,QAAQ,IAAID,GAAG,CAACC,IAAI,KAAK,OAAO,EAAE;UACxD;UACA,OAAOJ,OAAO,EAAE;QAClB,CAAC,MACC,OAAOC,MAAM,CAACE,GAAG,CAAC;MACtB,CAAC,MACC,OAAOH,OAAO,EAAE;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC,CACCK,IAAI,CAAC,MAAM;IACV;IACA,OAAON,OAAO,CAACO,GAAG,CAAC,CACjBrB,MAAM,CAACO,GAAG,CAAC,EACX,CAACE,SAAS,IAAIX,KAAK,CAACU,IAAI,EAAE,MAAM,CAAC,CAClC,CAAC;EACJ,CAAC,CAAC,CACDc,KAAK,CAAC,MAAM;IACX,OAAOnB,SAAS,CAAC,oBAAoB,GAAGK,IAAI,EAAE,MAAM;MAClD,OAAOP,IAAI,CAACO,IAAI,CAAC,CAACc,KAAK,CAAEJ,GAAG,IAAK;QAC/B,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;UACzB;UACA,MAAMD,GAAG;QACX;QACA;QACA;QACA,OAAOhB,IAAI,CAACK,GAAG,EAAEC,IAAI,CAAC;MACxB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"script","externalDependencies":[]}