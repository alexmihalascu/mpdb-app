{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst glob = require('glob');\nconst log = require('npmlog');\nconst which = require('which');\nconst win = process.platform === 'win32';\nfunction build(gyp, argv, callback) {\n  var platformMake = 'make';\n  if (process.platform === 'aix') {\n    platformMake = 'gmake';\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake';\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function (target) {\n      return '/t:' + target;\n    });\n  }\n  var makeCommand = gyp.opts.make || process.env.MAKE || platformMake;\n  var command = win ? 'msbuild' : makeCommand;\n  var jobs = gyp.opts.jobs || process.env.JOBS;\n  var buildType;\n  var config;\n  var arch;\n  var nodeDir;\n  var guessedSolution;\n  loadConfigGypi();\n\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi() {\n    var configPath = path.resolve('build', 'config.gypi');\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'));\n        } else {\n          callback(err);\n        }\n        return;\n      }\n      config = JSON.parse(data.replace(/#.+\\n/, ''));\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration;\n      arch = config.variables.target_arch;\n      nodeDir = config.variables.nodedir;\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release';\n      }\n      if (!buildType) {\n        buildType = 'Release';\n      }\n      log.verbose('build type', buildType);\n      log.verbose('architecture', arch);\n      log.verbose('node dev dir', nodeDir);\n      if (win) {\n        findSolutionFile();\n      } else {\n        doWhich();\n      }\n    });\n  }\n\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n  function findSolutionFile() {\n    glob('build/*.sln', function (err, files) {\n      if (err) {\n        return callback(err);\n      }\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'));\n      }\n      guessedSolution = files[0];\n      log.verbose('found first Solution file', guessedSolution);\n      doWhich();\n    });\n  }\n\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n  function doWhich() {\n    // On Windows use msbuild provided by node-gyp configure\n    if (win) {\n      if (!config.variables.msbuild_path) {\n        return callback(new Error('MSBuild is not set, please run `node-gyp configure`.'));\n      }\n      command = config.variables.msbuild_path;\n      log.verbose('using MSBuild:', command);\n      doBuild();\n      return;\n    }\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        // Some other error or 'make' not found on Unix, report that to the user\n        callback(err);\n        return;\n      }\n      log.verbose('`which` succeeded for `' + command + '`', execPath);\n      doBuild();\n    });\n  }\n\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n  function doBuild() {\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose;\n    var j;\n    if (!win && verbose) {\n      argv.push('V=1');\n    }\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal');\n    }\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo');\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      // Convert .gypi config target_arch to MSBuild /Platform\n      // Since there are many ways to state '32-bit Intel', default to it.\n      // N.B. msbuild's Condition string equality tests are case-insensitive.\n      var archLower = arch.toLowerCase();\n      var p = archLower === 'x64' ? 'x64' : archLower === 'arm' ? 'ARM' : archLower === 'arm64' ? 'ARM64' : 'Win32';\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p);\n      if (jobs) {\n        j = parseInt(jobs, 10);\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length);\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType);\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C');\n      argv.push('build');\n      if (jobs) {\n        j = parseInt(jobs, 10);\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs');\n          argv.push(j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs');\n          argv.push(require('os').cpus().length);\n        }\n      }\n    }\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) === '.sln';\n      });\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution);\n      }\n    }\n    var proc = gyp.spawn(command, argv);\n    proc.on('exit', onExit);\n  }\n  function onExit(code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code));\n    }\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal));\n    }\n    callback();\n  }\n}\nmodule.exports = build;\nmodule.exports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module';","map":{"version":3,"names":["fs","require","path","glob","log","which","win","process","platform","build","gyp","argv","callback","platformMake","indexOf","length","map","target","makeCommand","opts","make","env","MAKE","command","jobs","JOBS","buildType","config","arch","nodeDir","guessedSolution","loadConfigGypi","configPath","resolve","readFile","err","data","code","Error","JSON","parse","replace","target_defaults","default_configuration","variables","target_arch","nodedir","debug","verbose","findSolutionFile","doWhich","files","msbuild_path","doBuild","execPath","levels","level","j","push","archLower","toLowerCase","p","parseInt","isNaN","toUpperCase","cpus","hasSln","some","arg","extname","unshift","solution","proc","spawn","on","onExit","signal","module","exports","usage"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/node-gyp/lib/build.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst glob = require('glob')\nconst log = require('npmlog')\nconst which = require('which')\nconst win = process.platform === 'win32'\n\nfunction build (gyp, argv, callback) {\n  var platformMake = 'make'\n  if (process.platform === 'aix') {\n    platformMake = 'gmake'\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake'\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function (target) {\n      return '/t:' + target\n    })\n  }\n\n  var makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n  var command = win ? 'msbuild' : makeCommand\n  var jobs = gyp.opts.jobs || process.env.JOBS\n  var buildType\n  var config\n  var arch\n  var nodeDir\n  var guessedSolution\n\n  loadConfigGypi()\n\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi () {\n    var configPath = path.resolve('build', 'config.gypi')\n\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'))\n        } else {\n          callback(err)\n        }\n        return\n      }\n      config = JSON.parse(data.replace(/#.+\\n/, ''))\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration\n      arch = config.variables.target_arch\n      nodeDir = config.variables.nodedir\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release'\n      }\n      if (!buildType) {\n        buildType = 'Release'\n      }\n\n      log.verbose('build type', buildType)\n      log.verbose('architecture', arch)\n      log.verbose('node dev dir', nodeDir)\n\n      if (win) {\n        findSolutionFile()\n      } else {\n        doWhich()\n      }\n    })\n  }\n\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n  function findSolutionFile () {\n    glob('build/*.sln', function (err, files) {\n      if (err) {\n        return callback(err)\n      }\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'))\n      }\n      guessedSolution = files[0]\n      log.verbose('found first Solution file', guessedSolution)\n      doWhich()\n    })\n  }\n\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n  function doWhich () {\n    // On Windows use msbuild provided by node-gyp configure\n    if (win) {\n      if (!config.variables.msbuild_path) {\n        return callback(new Error(\n          'MSBuild is not set, please run `node-gyp configure`.'))\n      }\n      command = config.variables.msbuild_path\n      log.verbose('using MSBuild:', command)\n      doBuild()\n      return\n    }\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        // Some other error or 'make' not found on Unix, report that to the user\n        callback(err)\n        return\n      }\n      log.verbose('`which` succeeded for `' + command + '`', execPath)\n      doBuild()\n    })\n  }\n\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n  function doBuild () {\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose\n    var j\n\n    if (!win && verbose) {\n      argv.push('V=1')\n    }\n\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal')\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo')\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      // Convert .gypi config target_arch to MSBuild /Platform\n      // Since there are many ways to state '32-bit Intel', default to it.\n      // N.B. msbuild's Condition string equality tests are case-insensitive.\n      var archLower = arch.toLowerCase()\n      var p = archLower === 'x64' ? 'x64'\n        : (archLower === 'arm' ? 'ARM'\n          : (archLower === 'arm64' ? 'ARM64' : 'Win32'))\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p)\n      if (jobs) {\n        j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length)\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType)\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C')\n      argv.push('build')\n      if (jobs) {\n        j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs')\n          argv.push(j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs')\n          argv.push(require('os').cpus().length)\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) === '.sln'\n      })\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution)\n      }\n    }\n\n    var proc = gyp.spawn(command, argv)\n    proc.on('exit', onExit)\n  }\n\n  function onExit (code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code))\n    }\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal))\n    }\n    callback()\n  }\n}\n\nmodule.exports = build\nmodule.exports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module'\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAa,CAAC;AACjC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,GAAG,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC7B,MAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMK,GAAG,GAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO;AAExC,SAASC,KAAK,CAAEC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EACnC,IAAIC,YAAY,GAAG,MAAM;EACzB,IAAIN,OAAO,CAACC,QAAQ,KAAK,KAAK,EAAE;IAC9BK,YAAY,GAAG,OAAO;EACxB,CAAC,MAAM,IAAIN,OAAO,CAACC,QAAQ,CAACM,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;IACjDD,YAAY,GAAG,OAAO;EACxB,CAAC,MAAM,IAAIP,GAAG,IAAIK,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE;IACjCJ,IAAI,GAAGA,IAAI,CAACK,GAAG,CAAC,UAAUC,MAAM,EAAE;MAChC,OAAO,KAAK,GAAGA,MAAM;IACvB,CAAC,CAAC;EACJ;EAEA,IAAIC,WAAW,GAAGR,GAAG,CAACS,IAAI,CAACC,IAAI,IAAIb,OAAO,CAACc,GAAG,CAACC,IAAI,IAAIT,YAAY;EACnE,IAAIU,OAAO,GAAGjB,GAAG,GAAG,SAAS,GAAGY,WAAW;EAC3C,IAAIM,IAAI,GAAGd,GAAG,CAACS,IAAI,CAACK,IAAI,IAAIjB,OAAO,CAACc,GAAG,CAACI,IAAI;EAC5C,IAAIC,SAAS;EACb,IAAIC,MAAM;EACV,IAAIC,IAAI;EACR,IAAIC,OAAO;EACX,IAAIC,eAAe;EAEnBC,cAAc,EAAE;;EAEhB;AACF;AACA;;EAEE,SAASA,cAAc,GAAI;IACzB,IAAIC,UAAU,GAAG9B,IAAI,CAAC+B,OAAO,CAAC,OAAO,EAAE,aAAa,CAAC;IAErDjC,EAAE,CAACkC,QAAQ,CAACF,UAAU,EAAE,MAAM,EAAE,UAAUG,GAAG,EAAEC,IAAI,EAAE;MACnD,IAAID,GAAG,EAAE;QACP,IAAIA,GAAG,CAACE,IAAI,KAAK,QAAQ,EAAE;UACzBzB,QAAQ,CAAC,IAAI0B,KAAK,CAAC,0CAA0C,CAAC,CAAC;QACjE,CAAC,MAAM;UACL1B,QAAQ,CAACuB,GAAG,CAAC;QACf;QACA;MACF;MACAR,MAAM,GAAGY,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;MAE9C;MACAf,SAAS,GAAGC,MAAM,CAACe,eAAe,CAACC,qBAAqB;MACxDf,IAAI,GAAGD,MAAM,CAACiB,SAAS,CAACC,WAAW;MACnChB,OAAO,GAAGF,MAAM,CAACiB,SAAS,CAACE,OAAO;MAElC,IAAI,OAAO,IAAIpC,GAAG,CAACS,IAAI,EAAE;QACvBO,SAAS,GAAGhB,GAAG,CAACS,IAAI,CAAC4B,KAAK,GAAG,OAAO,GAAG,SAAS;MAClD;MACA,IAAI,CAACrB,SAAS,EAAE;QACdA,SAAS,GAAG,SAAS;MACvB;MAEAtB,GAAG,CAAC4C,OAAO,CAAC,YAAY,EAAEtB,SAAS,CAAC;MACpCtB,GAAG,CAAC4C,OAAO,CAAC,cAAc,EAAEpB,IAAI,CAAC;MACjCxB,GAAG,CAAC4C,OAAO,CAAC,cAAc,EAAEnB,OAAO,CAAC;MAEpC,IAAIvB,GAAG,EAAE;QACP2C,gBAAgB,EAAE;MACpB,CAAC,MAAM;QACLC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;;EAEE,SAASD,gBAAgB,GAAI;IAC3B9C,IAAI,CAAC,aAAa,EAAE,UAAUgC,GAAG,EAAEgB,KAAK,EAAE;MACxC,IAAIhB,GAAG,EAAE;QACP,OAAOvB,QAAQ,CAACuB,GAAG,CAAC;MACtB;MACA,IAAIgB,KAAK,CAACpC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAOH,QAAQ,CAAC,IAAI0B,KAAK,CAAC,qDAAqD,CAAC,CAAC;MACnF;MACAR,eAAe,GAAGqB,KAAK,CAAC,CAAC,CAAC;MAC1B/C,GAAG,CAAC4C,OAAO,CAAC,2BAA2B,EAAElB,eAAe,CAAC;MACzDoB,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;;EAEE,SAASA,OAAO,GAAI;IAClB;IACA,IAAI5C,GAAG,EAAE;MACP,IAAI,CAACqB,MAAM,CAACiB,SAAS,CAACQ,YAAY,EAAE;QAClC,OAAOxC,QAAQ,CAAC,IAAI0B,KAAK,CACvB,sDAAsD,CAAC,CAAC;MAC5D;MACAf,OAAO,GAAGI,MAAM,CAACiB,SAAS,CAACQ,YAAY;MACvChD,GAAG,CAAC4C,OAAO,CAAC,gBAAgB,EAAEzB,OAAO,CAAC;MACtC8B,OAAO,EAAE;MACT;IACF;IACA;IACAhD,KAAK,CAACkB,OAAO,EAAE,UAAUY,GAAG,EAAEmB,QAAQ,EAAE;MACtC,IAAInB,GAAG,EAAE;QACP;QACAvB,QAAQ,CAACuB,GAAG,CAAC;QACb;MACF;MACA/B,GAAG,CAAC4C,OAAO,CAAC,yBAAyB,GAAGzB,OAAO,GAAG,GAAG,EAAE+B,QAAQ,CAAC;MAChED,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;;EAEE,SAASA,OAAO,GAAI;IAClB;IACA,IAAIL,OAAO,GAAG5C,GAAG,CAACmD,MAAM,CAACnD,GAAG,CAACoD,KAAK,CAAC,IAAIpD,GAAG,CAACmD,MAAM,CAACP,OAAO;IACzD,IAAIS,CAAC;IAEL,IAAI,CAACnD,GAAG,IAAI0C,OAAO,EAAE;MACnBrC,IAAI,CAAC+C,IAAI,CAAC,KAAK,CAAC;IAClB;IAEA,IAAIpD,GAAG,IAAI,CAAC0C,OAAO,EAAE;MACnBrC,IAAI,CAAC+C,IAAI,CAAC,wBAAwB,CAAC;IACrC;IAEA,IAAIpD,GAAG,EAAE;MACP;MACAK,IAAI,CAAC+C,IAAI,CAAC,SAAS,CAAC;IACtB;;IAEA;IACA,IAAIpD,GAAG,EAAE;MACP;MACA;MACA;MACA,IAAIqD,SAAS,GAAG/B,IAAI,CAACgC,WAAW,EAAE;MAClC,IAAIC,CAAC,GAAGF,SAAS,KAAK,KAAK,GAAG,KAAK,GAC9BA,SAAS,KAAK,KAAK,GAAG,KAAK,GACzBA,SAAS,KAAK,OAAO,GAAG,OAAO,GAAG,OAAS;MAClDhD,IAAI,CAAC+C,IAAI,CAAC,mBAAmB,GAAGhC,SAAS,GAAG,YAAY,GAAGmC,CAAC,CAAC;MAC7D,IAAIrC,IAAI,EAAE;QACRiC,CAAC,GAAGK,QAAQ,CAACtC,IAAI,EAAE,EAAE,CAAC;QACtB,IAAI,CAACuC,KAAK,CAACN,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;UACtB9C,IAAI,CAAC+C,IAAI,CAAC,KAAK,GAAGD,CAAC,CAAC;QACtB,CAAC,MAAM,IAAIjC,IAAI,CAACwC,WAAW,EAAE,KAAK,KAAK,EAAE;UACvCrD,IAAI,CAAC+C,IAAI,CAAC,KAAK,GAAGzD,OAAO,CAAC,IAAI,CAAC,CAACgE,IAAI,EAAE,CAAClD,MAAM,CAAC;QAChD;MACF;IACF,CAAC,MAAM;MACLJ,IAAI,CAAC+C,IAAI,CAAC,YAAY,GAAGhC,SAAS,CAAC;MACnC;MACAf,IAAI,CAAC+C,IAAI,CAAC,IAAI,CAAC;MACf/C,IAAI,CAAC+C,IAAI,CAAC,OAAO,CAAC;MAClB,IAAIlC,IAAI,EAAE;QACRiC,CAAC,GAAGK,QAAQ,CAACtC,IAAI,EAAE,EAAE,CAAC;QACtB,IAAI,CAACuC,KAAK,CAACN,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;UACtB9C,IAAI,CAAC+C,IAAI,CAAC,QAAQ,CAAC;UACnB/C,IAAI,CAAC+C,IAAI,CAACD,CAAC,CAAC;QACd,CAAC,MAAM,IAAIjC,IAAI,CAACwC,WAAW,EAAE,KAAK,KAAK,EAAE;UACvCrD,IAAI,CAAC+C,IAAI,CAAC,QAAQ,CAAC;UACnB/C,IAAI,CAAC+C,IAAI,CAACzD,OAAO,CAAC,IAAI,CAAC,CAACgE,IAAI,EAAE,CAAClD,MAAM,CAAC;QACxC;MACF;IACF;IAEA,IAAIT,GAAG,EAAE;MACP;MACA,IAAI4D,MAAM,GAAGvD,IAAI,CAACwD,IAAI,CAAC,UAAUC,GAAG,EAAE;QACpC,OAAOlE,IAAI,CAACmE,OAAO,CAACD,GAAG,CAAC,KAAK,MAAM;MACrC,CAAC,CAAC;MACF,IAAI,CAACF,MAAM,EAAE;QACXvD,IAAI,CAAC2D,OAAO,CAAC5D,GAAG,CAACS,IAAI,CAACoD,QAAQ,IAAIzC,eAAe,CAAC;MACpD;IACF;IAEA,IAAI0C,IAAI,GAAG9D,GAAG,CAAC+D,KAAK,CAAClD,OAAO,EAAEZ,IAAI,CAAC;IACnC6D,IAAI,CAACE,EAAE,CAAC,MAAM,EAAEC,MAAM,CAAC;EACzB;EAEA,SAASA,MAAM,CAAEtC,IAAI,EAAEuC,MAAM,EAAE;IAC7B,IAAIvC,IAAI,KAAK,CAAC,EAAE;MACd,OAAOzB,QAAQ,CAAC,IAAI0B,KAAK,CAAC,GAAG,GAAGf,OAAO,GAAG,2BAA2B,GAAGc,IAAI,CAAC,CAAC;IAChF;IACA,IAAIuC,MAAM,EAAE;MACV,OAAOhE,QAAQ,CAAC,IAAI0B,KAAK,CAAC,GAAG,GAAGf,OAAO,GAAG,gBAAgB,GAAGqD,MAAM,CAAC,CAAC;IACvE;IACAhE,QAAQ,EAAE;EACZ;AACF;AAEAiE,MAAM,CAACC,OAAO,GAAGrE,KAAK;AACtBoE,MAAM,CAACC,OAAO,CAACC,KAAK,GAAG,WAAW,IAAIzE,GAAG,GAAG,SAAS,GAAG,MAAM,CAAC,GAAG,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}