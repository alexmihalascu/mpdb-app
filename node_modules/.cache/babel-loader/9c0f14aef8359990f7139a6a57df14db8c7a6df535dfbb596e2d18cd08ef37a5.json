{"ast":null,"code":"'use strict';\n\nconst util = require('util');\nconst contentPath = require('./path');\nconst fixOwner = require('../util/fix-owner');\nconst fs = require('fs');\nconst moveFile = require('../util/move-file');\nconst Minipass = require('minipass');\nconst Pipeline = require('minipass-pipeline');\nconst Flush = require('minipass-flush');\nconst path = require('path');\nconst rimraf = util.promisify(require('rimraf'));\nconst ssri = require('ssri');\nconst uniqueFilename = require('unique-filename');\nconst {\n  disposer\n} = require('./../util/disposer');\nconst fsm = require('fs-minipass');\nconst writeFile = util.promisify(fs.writeFile);\nmodule.exports = write;\nfunction write(cache, data) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    algorithms,\n    size,\n    integrity\n  } = opts;\n  if (algorithms && algorithms.length > 1) throw new Error('opts.algorithms only supports a single algorithm for now');\n  if (typeof size === 'number' && data.length !== size) return Promise.reject(sizeError(size, data.length));\n  const sri = ssri.fromData(data, algorithms ? {\n    algorithms\n  } : {});\n  if (integrity && !ssri.checkData(data, integrity, opts)) return Promise.reject(checksumError(integrity, sri));\n  return disposer(makeTmp(cache, opts), makeTmpDisposer, tmp => {\n    return writeFile(tmp.target, data, {\n      flag: 'wx'\n    }).then(() => moveToDestination(tmp, cache, sri, opts));\n  }).then(() => ({\n    integrity: sri,\n    size: data.length\n  }));\n}\nmodule.exports.stream = writeStream;\n\n// writes proxied to the 'inputStream' that is passed to the Promise\n// 'end' is deferred until content is handled.\nclass CacacheWriteStream extends Flush {\n  constructor(cache, opts) {\n    super();\n    this.opts = opts;\n    this.cache = cache;\n    this.inputStream = new Minipass();\n    this.inputStream.on('error', er => this.emit('error', er));\n    this.inputStream.on('drain', () => this.emit('drain'));\n    this.handleContentP = null;\n  }\n  write(chunk, encoding, cb) {\n    if (!this.handleContentP) {\n      this.handleContentP = handleContent(this.inputStream, this.cache, this.opts);\n    }\n    return this.inputStream.write(chunk, encoding, cb);\n  }\n  flush(cb) {\n    this.inputStream.end(() => {\n      if (!this.handleContentP) {\n        const e = new Error('Cache input stream was empty');\n        e.code = 'ENODATA';\n        // empty streams are probably emitting end right away.\n        // defer this one tick by rejecting a promise on it.\n        return Promise.reject(e).catch(cb);\n      }\n      this.handleContentP.then(res => {\n        res.integrity && this.emit('integrity', res.integrity);\n        res.size !== null && this.emit('size', res.size);\n        cb();\n      }, er => cb(er));\n    });\n  }\n}\nfunction writeStream(cache) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new CacacheWriteStream(cache, opts);\n}\nfunction handleContent(inputStream, cache, opts) {\n  return disposer(makeTmp(cache, opts), makeTmpDisposer, tmp => {\n    return pipeToTmp(inputStream, cache, tmp.target, opts).then(res => {\n      return moveToDestination(tmp, cache, res.integrity, opts).then(() => res);\n    });\n  });\n}\nfunction pipeToTmp(inputStream, cache, tmpTarget, opts) {\n  let integrity;\n  let size;\n  const hashStream = ssri.integrityStream({\n    integrity: opts.integrity,\n    algorithms: opts.algorithms,\n    size: opts.size\n  });\n  hashStream.on('integrity', i => {\n    integrity = i;\n  });\n  hashStream.on('size', s => {\n    size = s;\n  });\n  const outStream = new fsm.WriteStream(tmpTarget, {\n    flags: 'wx'\n  });\n\n  // NB: this can throw if the hashStream has a problem with\n  // it, and the data is fully written.  but pipeToTmp is only\n  // called in promisory contexts where that is handled.\n  const pipeline = new Pipeline(inputStream, hashStream, outStream);\n  return pipeline.promise().then(() => ({\n    integrity,\n    size\n  })).catch(er => rimraf(tmpTarget).then(() => {\n    throw er;\n  }));\n}\nfunction makeTmp(cache, opts) {\n  const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix);\n  return fixOwner.mkdirfix(cache, path.dirname(tmpTarget)).then(() => ({\n    target: tmpTarget,\n    moved: false\n  }));\n}\nfunction makeTmpDisposer(tmp) {\n  if (tmp.moved) return Promise.resolve();\n  return rimraf(tmp.target);\n}\nfunction moveToDestination(tmp, cache, sri, opts) {\n  const destination = contentPath(cache, sri);\n  const destDir = path.dirname(destination);\n  return fixOwner.mkdirfix(cache, destDir).then(() => {\n    return moveFile(tmp.target, destination);\n  }).then(() => {\n    tmp.moved = true;\n    return fixOwner.chownr(cache, destination);\n  });\n}\nfunction sizeError(expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction checksumError(expected, found) {\n  const err = new Error(`Integrity check failed:\n  Wanted: ${expected}\n   Found: ${found}`);\n  err.code = 'EINTEGRITY';\n  err.expected = expected;\n  err.found = found;\n  return err;\n}","map":{"version":3,"names":["util","require","contentPath","fixOwner","fs","moveFile","Minipass","Pipeline","Flush","path","rimraf","promisify","ssri","uniqueFilename","disposer","fsm","writeFile","module","exports","write","cache","data","opts","algorithms","size","integrity","length","Error","Promise","reject","sizeError","sri","fromData","checkData","checksumError","makeTmp","makeTmpDisposer","tmp","target","flag","then","moveToDestination","stream","writeStream","CacacheWriteStream","constructor","inputStream","on","er","emit","handleContentP","chunk","encoding","cb","handleContent","flush","end","e","code","catch","res","pipeToTmp","tmpTarget","hashStream","integrityStream","i","s","outStream","WriteStream","flags","pipeline","promise","join","tmpPrefix","mkdirfix","dirname","moved","resolve","destination","destDir","chownr","expected","found","err"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/cacache/lib/content/write.js"],"sourcesContent":["'use strict'\n\nconst util = require('util')\n\nconst contentPath = require('./path')\nconst fixOwner = require('../util/fix-owner')\nconst fs = require('fs')\nconst moveFile = require('../util/move-file')\nconst Minipass = require('minipass')\nconst Pipeline = require('minipass-pipeline')\nconst Flush = require('minipass-flush')\nconst path = require('path')\nconst rimraf = util.promisify(require('rimraf'))\nconst ssri = require('ssri')\nconst uniqueFilename = require('unique-filename')\nconst { disposer } = require('./../util/disposer')\nconst fsm = require('fs-minipass')\n\nconst writeFile = util.promisify(fs.writeFile)\n\nmodule.exports = write\n\nfunction write (cache, data, opts = {}) {\n  const { algorithms, size, integrity } = opts\n  if (algorithms && algorithms.length > 1)\n    throw new Error('opts.algorithms only supports a single algorithm for now')\n\n  if (typeof size === 'number' && data.length !== size)\n    return Promise.reject(sizeError(size, data.length))\n\n  const sri = ssri.fromData(data, algorithms ? { algorithms } : {})\n  if (integrity && !ssri.checkData(data, integrity, opts))\n    return Promise.reject(checksumError(integrity, sri))\n\n  return disposer(makeTmp(cache, opts), makeTmpDisposer,\n    (tmp) => {\n      return writeFile(tmp.target, data, { flag: 'wx' })\n        .then(() => moveToDestination(tmp, cache, sri, opts))\n    })\n    .then(() => ({ integrity: sri, size: data.length }))\n}\n\nmodule.exports.stream = writeStream\n\n// writes proxied to the 'inputStream' that is passed to the Promise\n// 'end' is deferred until content is handled.\nclass CacacheWriteStream extends Flush {\n  constructor (cache, opts) {\n    super()\n    this.opts = opts\n    this.cache = cache\n    this.inputStream = new Minipass()\n    this.inputStream.on('error', er => this.emit('error', er))\n    this.inputStream.on('drain', () => this.emit('drain'))\n    this.handleContentP = null\n  }\n\n  write (chunk, encoding, cb) {\n    if (!this.handleContentP) {\n      this.handleContentP = handleContent(\n        this.inputStream,\n        this.cache,\n        this.opts\n      )\n    }\n    return this.inputStream.write(chunk, encoding, cb)\n  }\n\n  flush (cb) {\n    this.inputStream.end(() => {\n      if (!this.handleContentP) {\n        const e = new Error('Cache input stream was empty')\n        e.code = 'ENODATA'\n        // empty streams are probably emitting end right away.\n        // defer this one tick by rejecting a promise on it.\n        return Promise.reject(e).catch(cb)\n      }\n      this.handleContentP.then(\n        (res) => {\n          res.integrity && this.emit('integrity', res.integrity)\n          res.size !== null && this.emit('size', res.size)\n          cb()\n        },\n        (er) => cb(er)\n      )\n    })\n  }\n}\n\nfunction writeStream (cache, opts = {}) {\n  return new CacacheWriteStream(cache, opts)\n}\n\nfunction handleContent (inputStream, cache, opts) {\n  return disposer(makeTmp(cache, opts), makeTmpDisposer, (tmp) => {\n    return pipeToTmp(inputStream, cache, tmp.target, opts)\n      .then((res) => {\n        return moveToDestination(\n          tmp,\n          cache,\n          res.integrity,\n          opts\n        ).then(() => res)\n      })\n  })\n}\n\nfunction pipeToTmp (inputStream, cache, tmpTarget, opts) {\n  let integrity\n  let size\n  const hashStream = ssri.integrityStream({\n    integrity: opts.integrity,\n    algorithms: opts.algorithms,\n    size: opts.size,\n  })\n  hashStream.on('integrity', i => {\n    integrity = i\n  })\n  hashStream.on('size', s => {\n    size = s\n  })\n\n  const outStream = new fsm.WriteStream(tmpTarget, {\n    flags: 'wx',\n  })\n\n  // NB: this can throw if the hashStream has a problem with\n  // it, and the data is fully written.  but pipeToTmp is only\n  // called in promisory contexts where that is handled.\n  const pipeline = new Pipeline(\n    inputStream,\n    hashStream,\n    outStream\n  )\n\n  return pipeline.promise()\n    .then(() => ({ integrity, size }))\n    .catch(er => rimraf(tmpTarget).then(() => {\n      throw er\n    }))\n}\n\nfunction makeTmp (cache, opts) {\n  const tmpTarget = uniqueFilename(path.join(cache, 'tmp'), opts.tmpPrefix)\n  return fixOwner.mkdirfix(cache, path.dirname(tmpTarget)).then(() => ({\n    target: tmpTarget,\n    moved: false,\n  }))\n}\n\nfunction makeTmpDisposer (tmp) {\n  if (tmp.moved)\n    return Promise.resolve()\n\n  return rimraf(tmp.target)\n}\n\nfunction moveToDestination (tmp, cache, sri, opts) {\n  const destination = contentPath(cache, sri)\n  const destDir = path.dirname(destination)\n\n  return fixOwner\n    .mkdirfix(cache, destDir)\n    .then(() => {\n      return moveFile(tmp.target, destination)\n    })\n    .then(() => {\n      tmp.moved = true\n      return fixOwner.chownr(cache, destination)\n    })\n}\n\nfunction sizeError (expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction checksumError (expected, found) {\n  const err = new Error(`Integrity check failed:\n  Wanted: ${expected}\n   Found: ${found}`)\n  err.code = 'EINTEGRITY'\n  err.expected = expected\n  err.found = found\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}