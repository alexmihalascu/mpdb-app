{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SocksProxyAgent = void 0;\nconst socks_1 = require(\"socks\");\nconst agent_base_1 = require(\"agent-base\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst dns_1 = __importDefault(require(\"dns\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst debug = (0, debug_1.default)('socks-proxy-agent');\nfunction parseSocksProxy(opts) {\n  var _a;\n  let port = 0;\n  let lookup = false;\n  let type = 5;\n  const host = opts.hostname || opts.host;\n  if (host == null) {\n    throw new TypeError('No \"hostname\"');\n  }\n  if (typeof opts.port === 'number') {\n    port = opts.port;\n  } else if (typeof opts.port === 'string') {\n    port = parseInt(opts.port, 10);\n  }\n  // From RFC 1928, Section 3: https://tools.ietf.org/html/rfc1928#section-3\n  // \"The SOCKS service is conventionally located on TCP port 1080\"\n  if (port == null) {\n    port = 1080;\n  }\n  // figure out if we want socks v4 or v5, based on the \"protocol\" used.\n  // Defaults to 5.\n  if (opts.protocol != null) {\n    switch (opts.protocol.replace(':', '')) {\n      case 'socks4':\n        lookup = true;\n      // pass through\n      case 'socks4a':\n        type = 4;\n        break;\n      case 'socks5':\n        lookup = true;\n      // pass through\n      case 'socks': // no version specified, default to 5h\n      case 'socks5h':\n        type = 5;\n        break;\n      default:\n        throw new TypeError(`A \"socks\" protocol must be specified! Got: ${String(opts.protocol)}`);\n    }\n  }\n  if (typeof opts.type !== 'undefined') {\n    if (opts.type === 4 || opts.type === 5) {\n      type = opts.type;\n    } else {\n      throw new TypeError(`\"type\" must be 4 or 5, got: ${String(opts.type)}`);\n    }\n  }\n  const proxy = {\n    host,\n    port,\n    type\n  };\n  let userId = (_a = opts.userId) !== null && _a !== void 0 ? _a : opts.username;\n  let password = opts.password;\n  if (opts.auth != null) {\n    const auth = opts.auth.split(':');\n    userId = auth[0];\n    password = auth[1];\n  }\n  if (userId != null) {\n    Object.defineProperty(proxy, 'userId', {\n      value: userId,\n      enumerable: false\n    });\n  }\n  if (password != null) {\n    Object.defineProperty(proxy, 'password', {\n      value: password,\n      enumerable: false\n    });\n  }\n  return {\n    lookup,\n    proxy\n  };\n}\nconst normalizeProxyOptions = input => {\n  let proxyOptions;\n  if (typeof input === 'string') {\n    proxyOptions = new URL(input);\n  } else {\n    proxyOptions = input;\n  }\n  if (proxyOptions == null) {\n    throw new TypeError('a SOCKS proxy server `hostname` and `port` must be specified!');\n  }\n  return proxyOptions;\n};\nclass SocksProxyAgent extends agent_base_1.Agent {\n  constructor(input, options) {\n    var _a;\n    const proxyOptions = normalizeProxyOptions(input);\n    super(proxyOptions);\n    const parsedProxy = parseSocksProxy(proxyOptions);\n    this.shouldLookup = parsedProxy.lookup;\n    this.proxy = parsedProxy.proxy;\n    this.tlsConnectionOptions = proxyOptions.tls != null ? proxyOptions.tls : {};\n    this.timeout = (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : null;\n  }\n  /**\n   * Initiates a SOCKS connection to the specified SOCKS proxy server,\n   * which in turn connects to the specified remote host and port.\n   *\n   * @api protected\n   */\n  callback(req, opts) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        shouldLookup,\n        proxy,\n        timeout\n      } = this;\n      let {\n        host,\n        port,\n        lookup: lookupCallback\n      } = opts;\n      if (host == null) {\n        throw new Error('No `host` defined!');\n      }\n      if (shouldLookup) {\n        // Client-side DNS resolution for \"4\" and \"5\" socks proxy versions.\n        host = yield new Promise((resolve, reject) => {\n          // Use the request's custom lookup, if one was configured:\n          const lookupFn = lookupCallback !== null && lookupCallback !== void 0 ? lookupCallback : dns_1.default.lookup;\n          lookupFn(host, {}, (err, res) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(res);\n            }\n          });\n        });\n      }\n      const socksOpts = {\n        proxy,\n        destination: {\n          host,\n          port\n        },\n        command: 'connect',\n        timeout: timeout !== null && timeout !== void 0 ? timeout : undefined\n      };\n      const cleanup = tlsSocket => {\n        req.destroy();\n        socket.destroy();\n        if (tlsSocket) tlsSocket.destroy();\n      };\n      debug('Creating socks proxy connection: %o', socksOpts);\n      const {\n        socket\n      } = yield socks_1.SocksClient.createConnection(socksOpts);\n      debug('Successfully created socks proxy connection');\n      if (timeout !== null) {\n        socket.setTimeout(timeout);\n        socket.on('timeout', () => cleanup());\n      }\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debug('Upgrading socket connection to TLS');\n        const servername = (_a = opts.servername) !== null && _a !== void 0 ? _a : opts.host;\n        const tlsSocket = tls_1.default.connect(Object.assign(Object.assign(Object.assign({}, omit(opts, 'host', 'hostname', 'path', 'port')), {\n          socket,\n          servername\n        }), this.tlsConnectionOptions));\n        tlsSocket.once('error', error => {\n          debug('socket TLS error', error.message);\n          cleanup(tlsSocket);\n        });\n        return tlsSocket;\n      }\n      return socket;\n    });\n  }\n}\nexports.SocksProxyAgent = SocksProxyAgent;\nfunction omit(obj) {\n  const ret = {};\n  let key;\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}","map":{"version":3,"mappings":"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","names":["debug","parseSocksProxy","opts","port","lookup","type","host","hostname","TypeError","parseInt","protocol","replace","String","proxy","userId","username","password","auth","split","Object","defineProperty","value","enumerable","normalizeProxyOptions","input","proxyOptions","URL","SocksProxyAgent","agent_base_1","constructor","options","parsedProxy","shouldLookup","tlsConnectionOptions","tls","timeout","callback","req","lookupCallback","Error","Promise","resolve","reject","lookupFn","dns_1","err","res","socksOpts","destination","command","undefined","cleanup","tlsSocket","destroy","socket","socks_1","createConnection","setTimeout","on","secureEndpoint","servername","tls_1","connect","omit","once","error","message","exports","obj","ret","key","keys","includes"],"sources":["../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}