{"ast":null,"code":"'use strict';\n\nconst index = require('./lib/entry-index');\nconst memo = require('./lib/memoization');\nconst write = require('./lib/content/write');\nconst Flush = require('minipass-flush');\nconst {\n  PassThrough\n} = require('minipass-collect');\nconst Pipeline = require('minipass-pipeline');\nconst putOpts = opts => ({\n  algorithms: ['sha512'],\n  ...opts\n});\nmodule.exports = putData;\nfunction putData(cache, key, data) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const {\n    memoize\n  } = opts;\n  opts = putOpts(opts);\n  return write(cache, data, opts).then(res => {\n    return index.insert(cache, key, res.integrity, {\n      ...opts,\n      size: res.size\n    }).then(entry => {\n      if (memoize) memo.put(cache, entry, data, opts);\n      return res.integrity;\n    });\n  });\n}\nmodule.exports.stream = putStream;\nfunction putStream(cache, key) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    memoize\n  } = opts;\n  opts = putOpts(opts);\n  let integrity;\n  let size;\n  let memoData;\n  const pipeline = new Pipeline();\n  // first item in the pipeline is the memoizer, because we need\n  // that to end first and get the collected data.\n  if (memoize) {\n    const memoizer = new PassThrough().on('collect', data => {\n      memoData = data;\n    });\n    pipeline.push(memoizer);\n  }\n\n  // contentStream is a write-only, not a passthrough\n  // no data comes out of it.\n  const contentStream = write.stream(cache, opts).on('integrity', int => {\n    integrity = int;\n  }).on('size', s => {\n    size = s;\n  });\n  pipeline.push(contentStream);\n\n  // last but not least, we write the index and emit hash and size,\n  // and memoize if we're doing that\n  pipeline.push(new Flush({\n    flush() {\n      return index.insert(cache, key, integrity, {\n        ...opts,\n        size\n      }).then(entry => {\n        if (memoize && memoData) memo.put(cache, entry, memoData, opts);\n        if (integrity) pipeline.emit('integrity', integrity);\n        if (size) pipeline.emit('size', size);\n      });\n    }\n  }));\n  return pipeline;\n}","map":{"version":3,"names":["index","require","memo","write","Flush","PassThrough","Pipeline","putOpts","opts","algorithms","module","exports","putData","cache","key","data","memoize","then","res","insert","integrity","size","entry","put","stream","putStream","memoData","pipeline","memoizer","on","push","contentStream","int","s","flush","emit"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/cacache/put.js"],"sourcesContent":["'use strict'\n\nconst index = require('./lib/entry-index')\nconst memo = require('./lib/memoization')\nconst write = require('./lib/content/write')\nconst Flush = require('minipass-flush')\nconst { PassThrough } = require('minipass-collect')\nconst Pipeline = require('minipass-pipeline')\n\nconst putOpts = (opts) => ({\n  algorithms: ['sha512'],\n  ...opts,\n})\n\nmodule.exports = putData\n\nfunction putData (cache, key, data, opts = {}) {\n  const { memoize } = opts\n  opts = putOpts(opts)\n  return write(cache, data, opts).then((res) => {\n    return index\n      .insert(cache, key, res.integrity, { ...opts, size: res.size })\n      .then((entry) => {\n        if (memoize)\n          memo.put(cache, entry, data, opts)\n\n        return res.integrity\n      })\n  })\n}\n\nmodule.exports.stream = putStream\n\nfunction putStream (cache, key, opts = {}) {\n  const { memoize } = opts\n  opts = putOpts(opts)\n  let integrity\n  let size\n\n  let memoData\n  const pipeline = new Pipeline()\n  // first item in the pipeline is the memoizer, because we need\n  // that to end first and get the collected data.\n  if (memoize) {\n    const memoizer = new PassThrough().on('collect', data => {\n      memoData = data\n    })\n    pipeline.push(memoizer)\n  }\n\n  // contentStream is a write-only, not a passthrough\n  // no data comes out of it.\n  const contentStream = write.stream(cache, opts)\n    .on('integrity', (int) => {\n      integrity = int\n    })\n    .on('size', (s) => {\n      size = s\n    })\n\n  pipeline.push(contentStream)\n\n  // last but not least, we write the index and emit hash and size,\n  // and memoize if we're doing that\n  pipeline.push(new Flush({\n    flush () {\n      return index\n        .insert(cache, key, integrity, { ...opts, size })\n        .then((entry) => {\n          if (memoize && memoData)\n            memo.put(cache, entry, memoData, opts)\n\n          if (integrity)\n            pipeline.emit('integrity', integrity)\n\n          if (size)\n            pipeline.emit('size', size)\n        })\n    },\n  }))\n\n  return pipeline\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}