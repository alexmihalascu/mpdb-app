{"ast":null,"code":"const {\n  URL,\n  domainToUnicode\n} = require('url');\nconst CHAR_LOWERCASE_A = 97;\nconst CHAR_LOWERCASE_Z = 122;\nconst isWindows = process.platform === 'win32';\nclass ERR_INVALID_FILE_URL_HOST extends TypeError {\n  constructor(platform) {\n    super(`File URL host must be \"localhost\" or empty on ${platform}`);\n    this.code = 'ERR_INVALID_FILE_URL_HOST';\n  }\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n}\nclass ERR_INVALID_FILE_URL_PATH extends TypeError {\n  constructor(msg) {\n    super(`File URL path ${msg}`);\n    this.code = 'ERR_INVALID_FILE_URL_PATH';\n  }\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n}\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor(name, actual) {\n    super(`The \"${name}\" argument must be one of type string or an instance ` + `of URL. Received type ${typeof actual} ${actual}`);\n    this.code = 'ERR_INVALID_ARG_TYPE';\n  }\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n}\nclass ERR_INVALID_URL_SCHEME extends TypeError {\n  constructor(expected) {\n    super(`The URL must be of scheme ${expected}`);\n    this.code = 'ERR_INVALID_URL_SCHEME';\n  }\n  toString() {\n    return `${this.name} [${this.code}]: ${this.message}`;\n  }\n}\nconst isURLInstance = input => {\n  return input != null && input.href && input.origin;\n};\nconst getPathFromURLWin32 = url => {\n  const hostname = url.hostname;\n  let pathname = url.pathname;\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20;\n      if (pathname[n + 1] === '2' && third === 102 || pathname[n + 1] === '5' && third === 99) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded \\\\ or / characters');\n      }\n    }\n  }\n  pathname = pathname.replace(/\\//g, '\\\\');\n  pathname = decodeURIComponent(pathname);\n  if (hostname !== '') {\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`;\n  }\n  const letter = pathname.codePointAt(1) | 0x20;\n  const sep = pathname[2];\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z || sep !== ':') {\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute');\n  }\n  return pathname.slice(1);\n};\nconst getPathFromURLPosix = url => {\n  if (url.hostname !== '') {\n    throw new ERR_INVALID_FILE_URL_HOST(process.platform);\n  }\n  const pathname = url.pathname;\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20;\n      if (pathname[n + 1] === '2' && third === 102) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded / characters');\n      }\n    }\n  }\n  return decodeURIComponent(pathname);\n};\nconst fileURLToPath = path => {\n  if (typeof path === 'string') {\n    path = new URL(path);\n  } else if (!isURLInstance(path)) {\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path);\n  }\n  if (path.protocol !== 'file:') {\n    throw new ERR_INVALID_URL_SCHEME('file');\n  }\n  return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);\n};\nmodule.exports = fileURLToPath;","map":{"version":3,"names":["URL","domainToUnicode","require","CHAR_LOWERCASE_A","CHAR_LOWERCASE_Z","isWindows","process","platform","ERR_INVALID_FILE_URL_HOST","TypeError","constructor","code","toString","name","message","ERR_INVALID_FILE_URL_PATH","msg","ERR_INVALID_ARG_TYPE","actual","ERR_INVALID_URL_SCHEME","expected","isURLInstance","input","href","origin","getPathFromURLWin32","url","hostname","pathname","n","length","third","codePointAt","replace","decodeURIComponent","letter","sep","slice","getPathFromURLPosix","fileURLToPath","path","protocol","module","exports"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/@npmcli/fs/lib/common/file-url-to-path/polyfill.js"],"sourcesContent":["const { URL, domainToUnicode } = require('url')\n\nconst CHAR_LOWERCASE_A = 97\nconst CHAR_LOWERCASE_Z = 122\n\nconst isWindows = process.platform === 'win32'\n\nclass ERR_INVALID_FILE_URL_HOST extends TypeError {\n  constructor (platform) {\n    super(`File URL host must be \"localhost\" or empty on ${platform}`)\n    this.code = 'ERR_INVALID_FILE_URL_HOST'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_FILE_URL_PATH extends TypeError {\n  constructor (msg) {\n    super(`File URL path ${msg}`)\n    this.code = 'ERR_INVALID_FILE_URL_PATH'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_ARG_TYPE extends TypeError {\n  constructor (name, actual) {\n    super(`The \"${name}\" argument must be one of type string or an instance ` +\n      `of URL. Received type ${typeof actual} ${actual}`)\n    this.code = 'ERR_INVALID_ARG_TYPE'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nclass ERR_INVALID_URL_SCHEME extends TypeError {\n  constructor (expected) {\n    super(`The URL must be of scheme ${expected}`)\n    this.code = 'ERR_INVALID_URL_SCHEME'\n  }\n\n  toString () {\n    return `${this.name} [${this.code}]: ${this.message}`\n  }\n}\n\nconst isURLInstance = (input) => {\n  return input != null && input.href && input.origin\n}\n\nconst getPathFromURLWin32 = (url) => {\n  const hostname = url.hostname\n  let pathname = url.pathname\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20\n      if ((pathname[n + 1] === '2' && third === 102) ||\n        (pathname[n + 1] === '5' && third === 99)) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded \\\\ or / characters')\n      }\n    }\n  }\n\n  pathname = pathname.replace(/\\//g, '\\\\')\n  pathname = decodeURIComponent(pathname)\n  if (hostname !== '') {\n    return `\\\\\\\\${domainToUnicode(hostname)}${pathname}`\n  }\n\n  const letter = pathname.codePointAt(1) | 0x20\n  const sep = pathname[2]\n  if (letter < CHAR_LOWERCASE_A || letter > CHAR_LOWERCASE_Z ||\n    (sep !== ':')) {\n    throw new ERR_INVALID_FILE_URL_PATH('must be absolute')\n  }\n\n  return pathname.slice(1)\n}\n\nconst getPathFromURLPosix = (url) => {\n  if (url.hostname !== '') {\n    throw new ERR_INVALID_FILE_URL_HOST(process.platform)\n  }\n\n  const pathname = url.pathname\n\n  for (let n = 0; n < pathname.length; n++) {\n    if (pathname[n] === '%') {\n      const third = pathname.codePointAt(n + 2) | 0x20\n      if (pathname[n + 1] === '2' && third === 102) {\n        throw new ERR_INVALID_FILE_URL_PATH('must not include encoded / characters')\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nconst fileURLToPath = (path) => {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isURLInstance(path)) {\n    throw new ERR_INVALID_ARG_TYPE('path', ['string', 'URL'], path)\n  }\n\n  if (path.protocol !== 'file:') {\n    throw new ERR_INVALID_URL_SCHEME('file')\n  }\n\n  return isWindows\n    ? getPathFromURLWin32(path)\n    : getPathFromURLPosix(path)\n}\n\nmodule.exports = fileURLToPath\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}