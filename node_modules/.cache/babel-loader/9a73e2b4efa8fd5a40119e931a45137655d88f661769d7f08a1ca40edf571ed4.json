{"ast":null,"code":"const Minipass = require('minipass');\nclass SizeError extends Error {\n  constructor(found, expect) {\n    super(`Bad data size: expected ${expect} bytes, but got ${found}`);\n    this.expect = expect;\n    this.found = found;\n    this.code = 'EBADSIZE';\n    Error.captureStackTrace(this, this.constructor);\n  }\n  get name() {\n    return 'SizeError';\n  }\n}\nclass MinipassSized extends Minipass {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    if (options.objectMode) throw new TypeError(`${this.constructor.name} streams only work with string and buffer data`);\n    this.found = 0;\n    this.expect = options.size;\n    if (typeof this.expect !== 'number' || this.expect > Number.MAX_SAFE_INTEGER || isNaN(this.expect) || this.expect < 0 || !isFinite(this.expect) || this.expect !== Math.floor(this.expect)) throw new Error('invalid expected size: ' + this.expect);\n  }\n  write(chunk, encoding, cb) {\n    const buffer = Buffer.isBuffer(chunk) ? chunk : typeof chunk === 'string' ? Buffer.from(chunk, typeof encoding === 'string' ? encoding : 'utf8') : chunk;\n    if (!Buffer.isBuffer(buffer)) {\n      this.emit('error', new TypeError(`${this.constructor.name} streams only work with string and buffer data`));\n      return false;\n    }\n    this.found += buffer.length;\n    if (this.found > this.expect) this.emit('error', new SizeError(this.found, this.expect));\n    return super.write(chunk, encoding, cb);\n  }\n  emit(ev) {\n    if (ev === 'end') {\n      if (this.found !== this.expect) this.emit('error', new SizeError(this.found, this.expect));\n    }\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n    return super.emit(ev, ...data);\n  }\n}\nMinipassSized.SizeError = SizeError;\nmodule.exports = MinipassSized;","map":{"version":3,"names":["Minipass","require","SizeError","Error","constructor","found","expect","code","captureStackTrace","name","MinipassSized","options","objectMode","TypeError","size","Number","MAX_SAFE_INTEGER","isNaN","isFinite","Math","floor","write","chunk","encoding","cb","buffer","Buffer","isBuffer","from","emit","length","ev","data","module","exports"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/minipass-sized/index.js"],"sourcesContent":["const Minipass = require('minipass')\n\nclass SizeError extends Error {\n  constructor (found, expect) {\n    super(`Bad data size: expected ${expect} bytes, but got ${found}`)\n    this.expect = expect\n    this.found = found\n    this.code = 'EBADSIZE'\n\t  Error.captureStackTrace(this, this.constructor)\n  }\n  get name () {\n    return 'SizeError'\n  }\n}\n\nclass MinipassSized extends Minipass {\n  constructor (options = {}) {\n    super(options)\n\n    if (options.objectMode)\n      throw new TypeError(`${\n        this.constructor.name\n      } streams only work with string and buffer data`)\n\n    this.found = 0\n    this.expect = options.size\n    if (typeof this.expect !== 'number' ||\n        this.expect > Number.MAX_SAFE_INTEGER ||\n        isNaN(this.expect) ||\n        this.expect < 0 ||\n        !isFinite(this.expect) ||\n        this.expect !== Math.floor(this.expect))\n      throw new Error('invalid expected size: ' + this.expect)\n  }\n\n  write (chunk, encoding, cb) {\n    const buffer = Buffer.isBuffer(chunk) ? chunk\n      : typeof chunk === 'string' ?\n        Buffer.from(chunk, typeof encoding === 'string' ? encoding : 'utf8')\n      : chunk\n\n    if (!Buffer.isBuffer(buffer)) {\n      this.emit('error', new TypeError(`${\n        this.constructor.name\n      } streams only work with string and buffer data`))\n      return false\n    }\n\n    this.found += buffer.length\n    if (this.found > this.expect)\n      this.emit('error', new SizeError(this.found, this.expect))\n\n    return super.write(chunk, encoding, cb)\n  }\n\n  emit (ev, ...data) {\n    if (ev === 'end') {\n      if (this.found !== this.expect)\n        this.emit('error', new SizeError(this.found, this.expect))\n    }\n    return super.emit(ev, ...data)\n  }\n}\n\nMinipassSized.SizeError = SizeError\n\nmodule.exports = MinipassSized\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}