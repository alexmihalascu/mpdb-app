{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst net_1 = __importDefault(require(\"net\"));\nconst tls_1 = __importDefault(require(\"tls\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst once_1 = __importDefault(require(\"@tootallnate/once\"));\nconst agent_base_1 = require(\"agent-base\");\nconst debug = debug_1.default('http-proxy-agent');\nfunction isHTTPS(protocol) {\n  return typeof protocol === 'string' ? /^https:?$/i.test(protocol) : false;\n}\n/**\n * The `HttpProxyAgent` implements an HTTP Agent subclass that connects\n * to the specified \"HTTP proxy server\" in order to proxy HTTP requests.\n *\n * @api public\n */\nclass HttpProxyAgent extends agent_base_1.Agent {\n  constructor(_opts) {\n    let opts;\n    if (typeof _opts === 'string') {\n      opts = url_1.default.parse(_opts);\n    } else {\n      opts = _opts;\n    }\n    if (!opts) {\n      throw new Error('an HTTP(S) proxy server `host` and `port` must be specified!');\n    }\n    debug('Creating new HttpProxyAgent instance: %o', opts);\n    super(opts);\n    const proxy = Object.assign({}, opts);\n    // If `true`, then connect to the proxy server over TLS.\n    // Defaults to `false`.\n    this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);\n    // Prefer `hostname` over `host`, and set the `port` if needed.\n    proxy.host = proxy.hostname || proxy.host;\n    if (typeof proxy.port === 'string') {\n      proxy.port = parseInt(proxy.port, 10);\n    }\n    if (!proxy.port && proxy.host) {\n      proxy.port = this.secureProxy ? 443 : 80;\n    }\n    if (proxy.host && proxy.path) {\n      // If both a `host` and `path` are specified then it's most likely\n      // the result of a `url.parse()` call... we need to remove the\n      // `path` portion so that `net.connect()` doesn't attempt to open\n      // that as a Unix socket file.\n      delete proxy.path;\n      delete proxy.pathname;\n    }\n    this.proxy = proxy;\n  }\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   *\n   * @api protected\n   */\n  callback(req, opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        proxy,\n        secureProxy\n      } = this;\n      const parsed = url_1.default.parse(req.path);\n      if (!parsed.protocol) {\n        parsed.protocol = 'http:';\n      }\n      if (!parsed.hostname) {\n        parsed.hostname = opts.hostname || opts.host || null;\n      }\n      if (parsed.port == null && typeof opts.port) {\n        parsed.port = String(opts.port);\n      }\n      if (parsed.port === '80') {\n        // if port is 80, then we can remove the port so that the\n        // \":80\" portion is not on the produced URL\n        delete parsed.port;\n      }\n      // Change the `http.ClientRequest` instance's \"path\" field\n      // to the absolute path of the URL that will be requested.\n      req.path = url_1.default.format(parsed);\n      // Inject the `Proxy-Authorization` header if necessary.\n      if (proxy.auth) {\n        req.setHeader('Proxy-Authorization', `Basic ${Buffer.from(proxy.auth).toString('base64')}`);\n      }\n      // Create a socket connection to the proxy server.\n      let socket;\n      if (secureProxy) {\n        debug('Creating `tls.Socket`: %o', proxy);\n        socket = tls_1.default.connect(proxy);\n      } else {\n        debug('Creating `net.Socket`: %o', proxy);\n        socket = net_1.default.connect(proxy);\n      }\n      // At this point, the http ClientRequest's internal `_header` field\n      // might have already been set. If this is the case then we'll need\n      // to re-generate the string since we just changed the `req.path`.\n      if (req._header) {\n        let first;\n        let endOfHeaders;\n        debug('Regenerating stored HTTP header string for request');\n        req._header = null;\n        req._implicitHeader();\n        if (req.output && req.output.length > 0) {\n          // Node < 12\n          debug('Patching connection write() output buffer with updated header');\n          first = req.output[0];\n          endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n          req.output[0] = req._header + first.substring(endOfHeaders);\n          debug('Output buffer: %o', req.output);\n        } else if (req.outputData && req.outputData.length > 0) {\n          // Node >= 12\n          debug('Patching connection write() output buffer with updated header');\n          first = req.outputData[0].data;\n          endOfHeaders = first.indexOf('\\r\\n\\r\\n') + 4;\n          req.outputData[0].data = req._header + first.substring(endOfHeaders);\n          debug('Output buffer: %o', req.outputData[0].data);\n        }\n      }\n      // Wait for the socket's `connect` event, so that this `callback()`\n      // function throws instead of the `http` request machinery. This is\n      // important for i.e. `PacProxyAgent` which determines a failed proxy\n      // connection via the `callback()` function throwing.\n      yield once_1.default(socket, 'connect');\n      return socket;\n    });\n  }\n}\nexports.default = HttpProxyAgent;","map":{"version":3,"mappings":"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","names":["debug","debug_1","isHTTPS","protocol","test","HttpProxyAgent","agent_base_1","constructor","_opts","opts","url_1","parse","Error","proxy","secureProxy","host","hostname","port","parseInt","path","pathname","callback","req","parsed","String","format","auth","setHeader","Buffer","from","toString","socket","tls_1","connect","net_1","_header","first","endOfHeaders","_implicitHeader","output","length","indexOf","substring","outputData","data","once_1","exports"],"sources":["../src/agent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}