{"ast":null,"code":"const {\n  join,\n  sep\n} = require('path');\nconst getOptions = require('./common/get-options.js');\nconst mkdir = require('./mkdir/index.js');\nconst mkdtemp = require('./mkdtemp.js');\nconst rm = require('./rm/index.js');\n\n// create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\nconst withTempDir = async (root, fn, opts) => {\n  const options = getOptions(opts, {\n    copy: ['tmpPrefix']\n  });\n  // create the directory, and fix its ownership\n  await mkdir(root, {\n    recursive: true,\n    owner: 'inherit'\n  });\n  const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), {\n    owner: 'inherit'\n  });\n  let err;\n  let result;\n  try {\n    result = await fn(target);\n  } catch (_err) {\n    err = _err;\n  }\n  try {\n    await rm(target, {\n      force: true,\n      recursive: true\n    });\n  } catch (err) {}\n  if (err) {\n    throw err;\n  }\n  return result;\n};\nmodule.exports = withTempDir;","map":{"version":3,"names":["join","sep","require","getOptions","mkdir","mkdtemp","rm","withTempDir","root","fn","opts","options","copy","recursive","owner","target","tmpPrefix","err","result","_err","force","module","exports"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/@npmcli/fs/lib/with-temp-dir.js"],"sourcesContent":["const { join, sep } = require('path')\n\nconst getOptions = require('./common/get-options.js')\nconst mkdir = require('./mkdir/index.js')\nconst mkdtemp = require('./mkdtemp.js')\nconst rm = require('./rm/index.js')\n\n// create a temp directory, ensure its permissions match its parent, then call\n// the supplied function passing it the path to the directory. clean up after\n// the function finishes, whether it throws or not\nconst withTempDir = async (root, fn, opts) => {\n  const options = getOptions(opts, {\n    copy: ['tmpPrefix'],\n  })\n  // create the directory, and fix its ownership\n  await mkdir(root, { recursive: true, owner: 'inherit' })\n\n  const target = await mkdtemp(join(`${root}${sep}`, options.tmpPrefix || ''), { owner: 'inherit' })\n  let err\n  let result\n\n  try {\n    result = await fn(target)\n  } catch (_err) {\n    err = _err\n  }\n\n  try {\n    await rm(target, { force: true, recursive: true })\n  } catch (err) {}\n\n  if (err) {\n    throw err\n  }\n\n  return result\n}\n\nmodule.exports = withTempDir\n"],"mappings":"AAAA,MAAM;EAAEA,IAAI;EAAEC;AAAI,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAErC,MAAMC,UAAU,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACrD,MAAME,KAAK,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AACzC,MAAMG,OAAO,GAAGH,OAAO,CAAC,cAAc,CAAC;AACvC,MAAMI,EAAE,GAAGJ,OAAO,CAAC,eAAe,CAAC;;AAEnC;AACA;AACA;AACA,MAAMK,WAAW,GAAG,OAAOC,IAAI,EAAEC,EAAE,EAAEC,IAAI,KAAK;EAC5C,MAAMC,OAAO,GAAGR,UAAU,CAACO,IAAI,EAAE;IAC/BE,IAAI,EAAE,CAAC,WAAW;EACpB,CAAC,CAAC;EACF;EACA,MAAMR,KAAK,CAACI,IAAI,EAAE;IAAEK,SAAS,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAU,CAAC,CAAC;EAExD,MAAMC,MAAM,GAAG,MAAMV,OAAO,CAACL,IAAI,CAAE,GAAEQ,IAAK,GAAEP,GAAI,EAAC,EAAEU,OAAO,CAACK,SAAS,IAAI,EAAE,CAAC,EAAE;IAAEF,KAAK,EAAE;EAAU,CAAC,CAAC;EAClG,IAAIG,GAAG;EACP,IAAIC,MAAM;EAEV,IAAI;IACFA,MAAM,GAAG,MAAMT,EAAE,CAACM,MAAM,CAAC;EAC3B,CAAC,CAAC,OAAOI,IAAI,EAAE;IACbF,GAAG,GAAGE,IAAI;EACZ;EAEA,IAAI;IACF,MAAMb,EAAE,CAACS,MAAM,EAAE;MAAEK,KAAK,EAAE,IAAI;MAAEP,SAAS,EAAE;IAAK,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOI,GAAG,EAAE,CAAC;EAEf,IAAIA,GAAG,EAAE;IACP,MAAMA,GAAG;EACX;EAEA,OAAOC,MAAM;AACf,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAGf,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}