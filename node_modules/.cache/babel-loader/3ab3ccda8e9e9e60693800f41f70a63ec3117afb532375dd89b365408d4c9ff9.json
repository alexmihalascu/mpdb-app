{"ast":null,"code":"const {\n  dirname,\n  sep\n} = require('path');\nconst fs = require('./fs.js');\nconst getOptions = require('./common/get-options.js');\nconst owner = require('./common/owner.js');\nconst mkdtemp = async (prefix, opts) => {\n  const options = getOptions(opts, {\n    copy: ['encoding', 'owner'],\n    wrap: 'encoding'\n  });\n\n  // mkdtemp relies on the trailing path separator to indicate if it should\n  // create a directory inside of the prefix. if that's the case then the root\n  // we infer ownership from is the prefix itself, otherwise it's the dirname\n  // /tmp -> /tmpABCDEF, infers from /\n  // /tmp/ -> /tmp/ABCDEF, infers from /tmp\n  const root = prefix.endsWith(sep) ? prefix : dirname(prefix);\n  const {\n    uid,\n    gid\n  } = await owner.validate(root, options.owner);\n  const result = await fs.mkdtemp(prefix, options);\n  await owner.update(result, uid, gid);\n  return result;\n};\nmodule.exports = mkdtemp;","map":{"version":3,"names":["dirname","sep","require","fs","getOptions","owner","mkdtemp","prefix","opts","options","copy","wrap","root","endsWith","uid","gid","validate","result","update","module","exports"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/@npmcli/fs/lib/mkdtemp.js"],"sourcesContent":["const { dirname, sep } = require('path')\n\nconst fs = require('./fs.js')\nconst getOptions = require('./common/get-options.js')\nconst owner = require('./common/owner.js')\n\nconst mkdtemp = async (prefix, opts) => {\n  const options = getOptions(opts, {\n    copy: ['encoding', 'owner'],\n    wrap: 'encoding',\n  })\n\n  // mkdtemp relies on the trailing path separator to indicate if it should\n  // create a directory inside of the prefix. if that's the case then the root\n  // we infer ownership from is the prefix itself, otherwise it's the dirname\n  // /tmp -> /tmpABCDEF, infers from /\n  // /tmp/ -> /tmp/ABCDEF, infers from /tmp\n  const root = prefix.endsWith(sep) ? prefix : dirname(prefix)\n  const { uid, gid } = await owner.validate(root, options.owner)\n\n  const result = await fs.mkdtemp(prefix, options)\n\n  await owner.update(result, uid, gid)\n\n  return result\n}\n\nmodule.exports = mkdtemp\n"],"mappings":"AAAA,MAAM;EAAEA,OAAO;EAAEC;AAAI,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AAExC,MAAMC,EAAE,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC7B,MAAME,UAAU,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACrD,MAAMG,KAAK,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAE1C,MAAMI,OAAO,GAAG,OAAOC,MAAM,EAAEC,IAAI,KAAK;EACtC,MAAMC,OAAO,GAAGL,UAAU,CAACI,IAAI,EAAE;IAC/BE,IAAI,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;IAC3BC,IAAI,EAAE;EACR,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA,MAAMC,IAAI,GAAGL,MAAM,CAACM,QAAQ,CAACZ,GAAG,CAAC,GAAGM,MAAM,GAAGP,OAAO,CAACO,MAAM,CAAC;EAC5D,MAAM;IAAEO,GAAG;IAAEC;EAAI,CAAC,GAAG,MAAMV,KAAK,CAACW,QAAQ,CAACJ,IAAI,EAAEH,OAAO,CAACJ,KAAK,CAAC;EAE9D,MAAMY,MAAM,GAAG,MAAMd,EAAE,CAACG,OAAO,CAACC,MAAM,EAAEE,OAAO,CAAC;EAEhD,MAAMJ,KAAK,CAACa,MAAM,CAACD,MAAM,EAAEH,GAAG,EAAEC,GAAG,CAAC;EAEpC,OAAOE,MAAM;AACf,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAGd,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}