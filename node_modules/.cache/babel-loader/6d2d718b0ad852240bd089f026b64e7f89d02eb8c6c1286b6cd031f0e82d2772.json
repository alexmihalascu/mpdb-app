{"ast":null,"code":"'use strict';\n\nconst log = require('npmlog');\nconst semver = require('semver');\nconst cp = require('child_process');\nconst extend = require('util')._extend; // eslint-disable-line\nconst win = process.platform === 'win32';\nconst logWithPrefix = require('./util').logWithPrefix;\nconst systemDrive = process.env.SystemDrive || 'C:';\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo();\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`;\nconst foundLocalAppData = process.env.LOCALAPPDATA || username;\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`;\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`;\nconst winDefaultLocationsArray = [];\nfor (const majorMinor of ['39', '38', '37', '36']) {\n  if (foundLocalAppData) {\n    winDefaultLocationsArray.push(`${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}\\\\python.exe`, `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}-32\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`, `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`);\n  } else {\n    winDefaultLocationsArray.push(`${programFiles}\\\\Python${majorMinor}\\\\python.exe`, `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`, `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`);\n  }\n}\nfunction getOsUserInfo() {\n  try {\n    return require('os').userInfo().username;\n  } catch (e) {}\n}\nfunction PythonFinder(configPython, callback) {\n  this.callback = callback;\n  this.configPython = configPython;\n  this.errorLog = [];\n}\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '>=3.6.0',\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: winDefaultLocationsArray,\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog(message) {\n    this.log.verbose(message);\n    this.errorLog.push(message);\n  },\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython() {\n    const SKIP = 0;\n    const FAIL = 1;\n    var toCheck = getChecks.apply(this);\n    function getChecks() {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog('checking Python explicitly set from NODE_GYP_FORCE_PYTHON');\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' + `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`);\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }];\n      }\n      var checks = [{\n        before: () => {\n          if (!this.configPython) {\n            this.addLog('Python is not set from command line or npm configuration');\n            return SKIP;\n          }\n          this.addLog('checking Python explicitly set from command line or ' + 'npm configuration');\n          this.addLog('- \"--python=\" or \"npm config get python\" is ' + `\"${this.configPython}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.configPython\n      }, {\n        before: () => {\n          if (!this.env.PYTHON) {\n            this.addLog('Python is not set from environment variable ' + 'PYTHON');\n            return SKIP;\n          }\n          this.addLog('checking Python explicitly set from environment ' + 'variable PYTHON');\n          this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`);\n        },\n        check: this.checkCommand,\n        arg: this.env.PYTHON\n      }, {\n        before: () => {\n          this.addLog('checking if \"python3\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python3'\n      }, {\n        before: () => {\n          this.addLog('checking if \"python\" can be used');\n        },\n        check: this.checkCommand,\n        arg: 'python'\n      }];\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i];\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' + `${location}`);\n            },\n            check: this.checkExecPath,\n            arg: location\n          });\n        }\n        checks.push({\n          before: () => {\n            this.addLog('checking if the py launcher can be used to find Python 3');\n          },\n          check: this.checkPyLauncher\n        });\n      }\n      return checks;\n    }\n    function runChecks(err) {\n      this.log.silly('runChecks: err = %j', err && err.stack || err);\n      const check = toCheck.shift();\n      if (!check) {\n        return this.fail();\n      }\n      const before = check.before.apply(this);\n      if (before === SKIP) {\n        return runChecks.apply(this);\n      }\n      if (before === FAIL) {\n        return this.fail();\n      }\n      const args = [runChecks.bind(this)];\n      if (check.arg) {\n        args.unshift(check.arg);\n      }\n      check.check.apply(this, args);\n    }\n    runChecks.apply(this);\n  },\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand(command, errorCallback) {\n    var exec = command;\n    var args = this.argsExecutable;\n    var shell = false;\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`;\n      args = args.map(a => `\"${a}\"`);\n      shell = true;\n    }\n    this.log.verbose(`- executing \"${command}\" to get executable path`);\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports Python 2 and Python 3, we should\n  // explicitly request a Python 3 version. This is done by supplying \"-3\" as\n  // the first command line argument. Since \"py.exe -3\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPyLauncher: function checkPyLauncher(errorCallback) {\n    this.log.verbose(`- executing \"${this.pyLauncher}\" to get Python 3 executable path`);\n    this.run(this.pyLauncher, ['-3', ...this.argsExecutable], false, function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n      if (err) {\n        this.addLog(`- \"${this.pyLauncher}\" is not in PATH or produced an error`);\n        return errorCallback(err);\n      }\n      this.addLog(`- executable path is \"${execPath}\"`);\n      this.checkExecPath(execPath, errorCallback);\n    }.bind(this));\n  },\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath(execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`);\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`);\n        return errorCallback(err);\n      }\n      this.addLog(`- version is \"${version}\"`);\n      const range = new semver.Range(this.semverRange);\n      var valid = false;\n      try {\n        valid = range.test(version);\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack);\n        this.addLog(`- \"${execPath}\" does not have a valid version`);\n        this.addLog('- is it a Python executable?');\n        return errorCallback(err);\n      }\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`);\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED');\n        return errorCallback(new Error(`Found unsupported Python version ${version}`));\n      }\n      this.succeed(execPath, version);\n    }.bind(this));\n  },\n  // Run an executable or shell command, trimming the output.\n  run: function run(exec, args, shell, callback) {\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    const opts = {\n      env: env,\n      shell: shell\n    };\n    this.log.silly('execFile: exec = %j', exec);\n    this.log.silly('execFile: args = %j', args);\n    this.log.silly('execFile: opts = %j', opts);\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this));\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack);\n      return callback(err);\n    }\n    function execFileCallback(err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', err && err.stack || err);\n      this.log.silly('execFile result: stdout = %j', stdout);\n      this.log.silly('execFile result: stderr = %j', stderr);\n      if (err) {\n        return callback(err);\n      }\n      const execPath = stdout.trim();\n      callback(null, execPath);\n    }\n  },\n  succeed: function succeed(execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`);\n    process.nextTick(this.callback.bind(null, null, execPath));\n  },\n  fail: function fail() {\n    const errorLog = this.errorLog.join('\\n');\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe' : '/path/to/pythonexecutable';\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    const info = ['**********************************************************', 'You need to install the latest version of Python.', 'Node-gyp should be able to find and use Python. If not,', 'you can try one of the following options:', `- Use the switch --python=\"${pathExample}\"`, '  (accepted by both node-gyp and npm)', '- Set the environment variable PYTHON', '- Set the npm configuration variable python:', `  npm config set python \"${pathExample}\"`, 'For more information consult the documentation at:', 'https://github.com/nodejs/node-gyp#installation', '**********************************************************'].join('\\n');\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`);\n    process.nextTick(this.callback.bind(null, new Error('Could not find any Python installation to use')));\n  }\n};\nfunction findPython(configPython, callback) {\n  var finder = new PythonFinder(configPython, callback);\n  finder.findPython();\n}\nmodule.exports = findPython;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n};","map":{"version":3,"names":["log","require","semver","cp","extend","_extend","win","process","platform","logWithPrefix","systemDrive","env","SystemDrive","username","USERNAME","USER","getOsUserInfo","localAppData","LOCALAPPDATA","foundLocalAppData","programFiles","ProgramW6432","ProgramFiles","programFilesX86","winDefaultLocationsArray","majorMinor","push","userInfo","e","PythonFinder","configPython","callback","errorLog","prototype","argsExecutable","argsVersion","semverRange","execFile","pyLauncher","winDefaultLocations","addLog","message","verbose","findPython","SKIP","FAIL","toCheck","getChecks","apply","NODE_GYP_FORCE_PYTHON","before","check","checkCommand","arg","checks","PYTHON","i","length","location","checkExecPath","checkPyLauncher","runChecks","err","silly","stack","shift","fail","args","bind","unshift","command","errorCallback","exec","shell","map","a","run","execPath","version","range","Range","valid","test","Error","succeed","TERM","opts","execFileCallback","stdout","stderr","trim","info","nextTick","join","pathExample","error","finder","module","exports"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/node-gyp/lib/find-python.js"],"sourcesContent":["'use strict'\n\nconst log = require('npmlog')\nconst semver = require('semver')\nconst cp = require('child_process')\nconst extend = require('util')._extend // eslint-disable-line\nconst win = process.platform === 'win32'\nconst logWithPrefix = require('./util').logWithPrefix\n\nconst systemDrive = process.env.SystemDrive || 'C:'\nconst username = process.env.USERNAME || process.env.USER || getOsUserInfo()\nconst localAppData = process.env.LOCALAPPDATA || `${systemDrive}\\\\${username}\\\\AppData\\\\Local`\nconst foundLocalAppData = process.env.LOCALAPPDATA || username\nconst programFiles = process.env.ProgramW6432 || process.env.ProgramFiles || `${systemDrive}\\\\Program Files`\nconst programFilesX86 = process.env['ProgramFiles(x86)'] || `${programFiles} (x86)`\n\nconst winDefaultLocationsArray = []\nfor (const majorMinor of ['39', '38', '37', '36']) {\n  if (foundLocalAppData) {\n    winDefaultLocationsArray.push(\n      `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}\\\\python.exe`,\n      `${localAppData}\\\\Programs\\\\Python\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`\n    )\n  } else {\n    winDefaultLocationsArray.push(\n      `${programFiles}\\\\Python${majorMinor}\\\\python.exe`,\n      `${programFiles}\\\\Python${majorMinor}-32\\\\python.exe`,\n      `${programFilesX86}\\\\Python${majorMinor}-32\\\\python.exe`\n    )\n  }\n}\n\nfunction getOsUserInfo () {\n  try {\n    return require('os').userInfo().username\n  } catch (e) {}\n}\n\nfunction PythonFinder (configPython, callback) {\n  this.callback = callback\n  this.configPython = configPython\n  this.errorLog = []\n}\n\nPythonFinder.prototype = {\n  log: logWithPrefix(log, 'find Python'),\n  argsExecutable: ['-c', 'import sys; print(sys.executable);'],\n  argsVersion: ['-c', 'import sys; print(\"%s.%s.%s\" % sys.version_info[:3]);'],\n  semverRange: '>=3.6.0',\n\n  // These can be overridden for testing:\n  execFile: cp.execFile,\n  env: process.env,\n  win: win,\n  pyLauncher: 'py.exe',\n  winDefaultLocations: winDefaultLocationsArray,\n\n  // Logs a message at verbose level, but also saves it to be displayed later\n  // at error level if an error occurs. This should help diagnose the problem.\n  addLog: function addLog (message) {\n    this.log.verbose(message)\n    this.errorLog.push(message)\n  },\n\n  // Find Python by trying a sequence of possibilities.\n  // Ignore errors, keep trying until Python is found.\n  findPython: function findPython () {\n    const SKIP = 0; const FAIL = 1\n    var toCheck = getChecks.apply(this)\n\n    function getChecks () {\n      if (this.env.NODE_GYP_FORCE_PYTHON) {\n        return [{\n          before: () => {\n            this.addLog(\n              'checking Python explicitly set from NODE_GYP_FORCE_PYTHON')\n            this.addLog('- process.env.NODE_GYP_FORCE_PYTHON is ' +\n              `\"${this.env.NODE_GYP_FORCE_PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.NODE_GYP_FORCE_PYTHON\n        }]\n      }\n\n      var checks = [\n        {\n          before: () => {\n            if (!this.configPython) {\n              this.addLog(\n                'Python is not set from command line or npm configuration')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from command line or ' +\n              'npm configuration')\n            this.addLog('- \"--python=\" or \"npm config get python\" is ' +\n              `\"${this.configPython}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.configPython\n        },\n        {\n          before: () => {\n            if (!this.env.PYTHON) {\n              this.addLog('Python is not set from environment variable ' +\n                'PYTHON')\n              return SKIP\n            }\n            this.addLog('checking Python explicitly set from environment ' +\n              'variable PYTHON')\n            this.addLog(`- process.env.PYTHON is \"${this.env.PYTHON}\"`)\n          },\n          check: this.checkCommand,\n          arg: this.env.PYTHON\n        },\n        {\n          before: () => { this.addLog('checking if \"python3\" can be used') },\n          check: this.checkCommand,\n          arg: 'python3'\n        },\n        {\n          before: () => { this.addLog('checking if \"python\" can be used') },\n          check: this.checkCommand,\n          arg: 'python'\n        }\n      ]\n\n      if (this.win) {\n        for (var i = 0; i < this.winDefaultLocations.length; ++i) {\n          const location = this.winDefaultLocations[i]\n          checks.push({\n            before: () => {\n              this.addLog('checking if Python is ' +\n                `${location}`)\n            },\n            check: this.checkExecPath,\n            arg: location\n          })\n        }\n        checks.push({\n          before: () => {\n            this.addLog(\n              'checking if the py launcher can be used to find Python 3')\n          },\n          check: this.checkPyLauncher\n        })\n      }\n\n      return checks\n    }\n\n    function runChecks (err) {\n      this.log.silly('runChecks: err = %j', (err && err.stack) || err)\n\n      const check = toCheck.shift()\n      if (!check) {\n        return this.fail()\n      }\n\n      const before = check.before.apply(this)\n      if (before === SKIP) {\n        return runChecks.apply(this)\n      }\n      if (before === FAIL) {\n        return this.fail()\n      }\n\n      const args = [runChecks.bind(this)]\n      if (check.arg) {\n        args.unshift(check.arg)\n      }\n      check.check.apply(this, args)\n    }\n\n    runChecks.apply(this)\n  },\n\n  // Check if command is a valid Python to use.\n  // Will exit the Python finder on success.\n  // If on Windows, run in a CMD shell to support BAT/CMD launchers.\n  checkCommand: function checkCommand (command, errorCallback) {\n    var exec = command\n    var args = this.argsExecutable\n    var shell = false\n    if (this.win) {\n      // Arguments have to be manually quoted\n      exec = `\"${exec}\"`\n      args = args.map(a => `\"${a}\"`)\n      shell = true\n    }\n\n    this.log.verbose(`- executing \"${command}\" to get executable path`)\n    this.run(exec, args, shell, function (err, execPath) {\n      // Possible outcomes:\n      // - Error: not in PATH, not executable or execution fails\n      // - Gibberish: the next command to check version will fail\n      // - Absolute path to executable\n      if (err) {\n        this.addLog(`- \"${command}\" is not in PATH or produced an error`)\n        return errorCallback(err)\n      }\n      this.addLog(`- executable path is \"${execPath}\"`)\n      this.checkExecPath(execPath, errorCallback)\n    }.bind(this))\n  },\n\n  // Check if the py launcher can find a valid Python to use.\n  // Will exit the Python finder on success.\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports Python 2 and Python 3, we should\n  // explicitly request a Python 3 version. This is done by supplying \"-3\" as\n  // the first command line argument. Since \"py.exe -3\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPyLauncher: function checkPyLauncher (errorCallback) {\n    this.log.verbose(\n      `- executing \"${this.pyLauncher}\" to get Python 3 executable path`)\n    this.run(this.pyLauncher, ['-3', ...this.argsExecutable], false,\n      function (err, execPath) {\n      // Possible outcomes: same as checkCommand\n        if (err) {\n          this.addLog(\n            `- \"${this.pyLauncher}\" is not in PATH or produced an error`)\n          return errorCallback(err)\n        }\n        this.addLog(`- executable path is \"${execPath}\"`)\n        this.checkExecPath(execPath, errorCallback)\n      }.bind(this))\n  },\n\n  // Check if a Python executable is the correct version to use.\n  // Will exit the Python finder on success.\n  checkExecPath: function checkExecPath (execPath, errorCallback) {\n    this.log.verbose(`- executing \"${execPath}\" to get version`)\n    this.run(execPath, this.argsVersion, false, function (err, version) {\n      // Possible outcomes:\n      // - Error: executable can not be run (likely meaning the command wasn't\n      //   a Python executable and the previous command produced gibberish)\n      // - Gibberish: somehow the last command produced an executable path,\n      //   this will fail when verifying the version\n      // - Version of the Python executable\n      if (err) {\n        this.addLog(`- \"${execPath}\" could not be run`)\n        return errorCallback(err)\n      }\n      this.addLog(`- version is \"${version}\"`)\n\n      const range = new semver.Range(this.semverRange)\n      var valid = false\n      try {\n        valid = range.test(version)\n      } catch (err) {\n        this.log.silly('range.test() threw:\\n%s', err.stack)\n        this.addLog(`- \"${execPath}\" does not have a valid version`)\n        this.addLog('- is it a Python executable?')\n        return errorCallback(err)\n      }\n\n      if (!valid) {\n        this.addLog(`- version is ${version} - should be ${this.semverRange}`)\n        this.addLog('- THIS VERSION OF PYTHON IS NOT SUPPORTED')\n        return errorCallback(new Error(\n          `Found unsupported Python version ${version}`))\n      }\n      this.succeed(execPath, version)\n    }.bind(this))\n  },\n\n  // Run an executable or shell command, trimming the output.\n  run: function run (exec, args, shell, callback) {\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n    const opts = { env: env, shell: shell }\n\n    this.log.silly('execFile: exec = %j', exec)\n    this.log.silly('execFile: args = %j', args)\n    this.log.silly('execFile: opts = %j', opts)\n    try {\n      this.execFile(exec, args, opts, execFileCallback.bind(this))\n    } catch (err) {\n      this.log.silly('execFile: threw:\\n%s', err.stack)\n      return callback(err)\n    }\n\n    function execFileCallback (err, stdout, stderr) {\n      this.log.silly('execFile result: err = %j', (err && err.stack) || err)\n      this.log.silly('execFile result: stdout = %j', stdout)\n      this.log.silly('execFile result: stderr = %j', stderr)\n      if (err) {\n        return callback(err)\n      }\n      const execPath = stdout.trim()\n      callback(null, execPath)\n    }\n  },\n\n  succeed: function succeed (execPath, version) {\n    this.log.info(`using Python version ${version} found at \"${execPath}\"`)\n    process.nextTick(this.callback.bind(null, null, execPath))\n  },\n\n  fail: function fail () {\n    const errorLog = this.errorLog.join('\\n')\n\n    const pathExample = this.win ? 'C:\\\\Path\\\\To\\\\python.exe'\n      : '/path/to/pythonexecutable'\n    // For Windows 80 col console, use up to the column before the one marked\n    // with X (total 79 chars including logger prefix, 58 chars usable here):\n    //                                                           X\n    const info = [\n      '**********************************************************',\n      'You need to install the latest version of Python.',\n      'Node-gyp should be able to find and use Python. If not,',\n      'you can try one of the following options:',\n      `- Use the switch --python=\"${pathExample}\"`,\n      '  (accepted by both node-gyp and npm)',\n      '- Set the environment variable PYTHON',\n      '- Set the npm configuration variable python:',\n      `  npm config set python \"${pathExample}\"`,\n      'For more information consult the documentation at:',\n      'https://github.com/nodejs/node-gyp#installation',\n      '**********************************************************'\n    ].join('\\n')\n\n    this.log.error(`\\n${errorLog}\\n\\n${info}\\n`)\n    process.nextTick(this.callback.bind(null, new Error(\n      'Could not find any Python installation to use')))\n  }\n}\n\nfunction findPython (configPython, callback) {\n  var finder = new PythonFinder(configPython, callback)\n  finder.findPython()\n}\n\nmodule.exports = findPython\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findPython: findPython\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}