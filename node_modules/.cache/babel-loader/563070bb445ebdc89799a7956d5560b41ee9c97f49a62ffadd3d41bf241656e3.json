{"ast":null,"code":"'use strict';\n\nconst Url = require('url');\nconst http = require('http');\nconst https = require('https');\nconst zlib = require('minizlib');\nconst Minipass = require('minipass');\nconst Body = require('./body.js');\nconst {\n  writeToStream,\n  getTotalBytes\n} = Body;\nconst Response = require('./response.js');\nconst Headers = require('./headers.js');\nconst {\n  createHeadersLenient\n} = Headers;\nconst Request = require('./request.js');\nconst {\n  getNodeRequestOptions\n} = Request;\nconst FetchError = require('./fetch-error.js');\nconst AbortError = require('./abort-error.js');\nconst resolveUrl = Url.resolve;\nconst fetch = (url, opts) => {\n  if (/^data:/.test(url)) {\n    const request = new Request(url, opts);\n    try {\n      const split = url.split(',');\n      const data = Buffer.from(split[1], 'base64');\n      const type = split[0].match(/^data:(.*);base64$/)[1];\n      return Promise.resolve(new Response(data, {\n        headers: {\n          'Content-Type': type,\n          'Content-Length': data.length\n        }\n      }));\n    } catch (er) {\n      return Promise.reject(new FetchError(`[${request.method}] ${request.url} invalid URL, ${er.message}`, 'system', er));\n    }\n  }\n  return new Promise((resolve, reject) => {\n    // build request object\n    const request = new Request(url, opts);\n    let options;\n    try {\n      options = getNodeRequestOptions(request);\n    } catch (er) {\n      return reject(er);\n    }\n    const send = (options.protocol === 'https:' ? https : http).request;\n    const {\n      signal\n    } = request;\n    let response = null;\n    const abort = () => {\n      const error = new AbortError('The user aborted a request.');\n      reject(error);\n      if (Minipass.isStream(request.body) && typeof request.body.destroy === 'function') {\n        request.body.destroy(error);\n      }\n      if (response && response.body) {\n        response.body.emit('error', error);\n      }\n    };\n    if (signal && signal.aborted) return abort();\n    const abortAndFinalize = () => {\n      abort();\n      finalize();\n    };\n    const finalize = () => {\n      req.abort();\n      if (signal) signal.removeEventListener('abort', abortAndFinalize);\n      clearTimeout(reqTimeout);\n    };\n\n    // send request\n    const req = send(options);\n    if (signal) signal.addEventListener('abort', abortAndFinalize);\n    let reqTimeout = null;\n    if (request.timeout) {\n      req.once('socket', socket => {\n        reqTimeout = setTimeout(() => {\n          reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n          finalize();\n        }, request.timeout);\n      });\n    }\n    req.on('error', er => {\n      // if a 'response' event is emitted before the 'error' event, then by the\n      // time this handler is run it's too late to reject the Promise for the\n      // response. instead, we forward the error event to the response stream\n      // so that the error will surface to the user when they try to consume\n      // the body. this is done as a side effect of aborting the request except\n      // for in windows, where we must forward the event manually, otherwise\n      // there is no longer a ref'd socket attached to the request and the\n      // stream never ends so the event loop runs out of work and the process\n      // exits without warning.\n      // coverage skipped here due to the difficulty in testing\n      // istanbul ignore next\n      if (req.res) req.res.emit('error', er);\n      reject(new FetchError(`request to ${request.url} failed, reason: ${er.message}`, 'system', er));\n      finalize();\n    });\n    req.on('response', res => {\n      clearTimeout(reqTimeout);\n      const headers = createHeadersLenient(res.headers);\n\n      // HTTP fetch step 5\n      if (fetch.isRedirect(res.statusCode)) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location');\n\n        // HTTP fetch step 5.3\n        const locationURL = location === null ? null : resolveUrl(request.url, location);\n\n        // HTTP fetch step 5.5\n        switch (request.redirect) {\n          case 'error':\n            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n            finalize();\n            return;\n          case 'manual':\n            // node-fetch-specific step: make manual redirect a bit easier to\n            // use by setting the Location header value to the resolved URL.\n            if (locationURL !== null) {\n              // handle corrupted header\n              try {\n                headers.set('Location', locationURL);\n              } catch (err) {\n                /* istanbul ignore next: nodejs server prevent invalid\n                   response headers, we can't test this through normal\n                   request */\n                reject(err);\n              }\n            }\n            break;\n          case 'follow':\n            // HTTP-redirect fetch step 2\n            if (locationURL === null) {\n              break;\n            }\n\n            // HTTP-redirect fetch step 5\n            if (request.counter >= request.follow) {\n              reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n              finalize();\n              return;\n            }\n\n            // HTTP-redirect fetch step 9\n            if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n              reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n              finalize();\n              return;\n            }\n\n            // Update host due to redirection\n            request.headers.set('host', Url.parse(locationURL).host);\n\n            // HTTP-redirect fetch step 6 (counter increment)\n            // Create a new Request object.\n            const requestOpts = {\n              headers: new Headers(request.headers),\n              follow: request.follow,\n              counter: request.counter + 1,\n              agent: request.agent,\n              compress: request.compress,\n              method: request.method,\n              body: request.body,\n              signal: request.signal,\n              timeout: request.timeout\n            };\n\n            // HTTP-redirect fetch step 11\n            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n              requestOpts.method = 'GET';\n              requestOpts.body = undefined;\n              requestOpts.headers.delete('content-length');\n            }\n\n            // HTTP-redirect fetch step 15\n            resolve(fetch(new Request(locationURL, requestOpts)));\n            finalize();\n            return;\n        }\n      } // end if(isRedirect)\n\n      // prepare response\n      res.once('end', () => signal && signal.removeEventListener('abort', abortAndFinalize));\n      const body = new Minipass();\n      // exceedingly rare that the stream would have an error,\n      // but just in case we proxy it to the stream in use.\n      res.on('error', /* istanbul ignore next */er => body.emit('error', er));\n      res.on('data', chunk => body.write(chunk));\n      res.on('end', () => body.end());\n      const responseOptions = {\n        url: request.url,\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: headers,\n        size: request.size,\n        timeout: request.timeout,\n        counter: request.counter,\n        trailer: new Promise(resolve => res.on('end', () => resolve(createHeadersLenient(res.trailers))))\n      };\n\n      // HTTP-network fetch step 12.1.1.3\n      const codings = headers.get('Content-Encoding');\n\n      // HTTP-network fetch step 12.1.1.4: handle content codings\n\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n      if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n      const zlibOptions = {\n        flush: zlib.constants.Z_SYNC_FLUSH,\n        finishFlush: zlib.constants.Z_SYNC_FLUSH\n      };\n\n      // for gzip\n      if (codings == 'gzip' || codings == 'x-gzip') {\n        const unzip = new zlib.Gunzip(zlibOptions);\n        response = new Response(\n        // exceedingly rare that the stream would have an error,\n        // but just in case we proxy it to the stream in use.\n        body.on('error', /* istanbul ignore next */er => unzip.emit('error', er)).pipe(unzip), responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // for deflate\n      if (codings == 'deflate' || codings == 'x-deflate') {\n        // handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = res.pipe(new Minipass());\n        raw.once('data', chunk => {\n          // see http://stackoverflow.com/questions/37519828\n          const decoder = (chunk[0] & 0x0F) === 0x08 ? new zlib.Inflate() : new zlib.InflateRaw();\n          // exceedingly rare that the stream would have an error,\n          // but just in case we proxy it to the stream in use.\n          body.on('error', /* istanbul ignore next */er => decoder.emit('error', er)).pipe(decoder);\n          response = new Response(decoder, responseOptions);\n          resolve(response);\n        });\n        return;\n      }\n\n      // for br\n      if (codings == 'br') {\n        // ignoring coverage so tests don't have to fake support (or lack of) for brotli\n        // istanbul ignore next\n        try {\n          var decoder = new zlib.BrotliDecompress();\n        } catch (err) {\n          reject(err);\n          finalize();\n          return;\n        }\n        // exceedingly rare that the stream would have an error,\n        // but just in case we proxy it to the stream in use.\n        body.on('error', /* istanbul ignore next */er => decoder.emit('error', er)).pipe(decoder);\n        response = new Response(decoder, responseOptions);\n        resolve(response);\n        return;\n      }\n\n      // otherwise, use response as-is\n      response = new Response(body, responseOptions);\n      resolve(response);\n    });\n    writeToStream(req, request);\n  });\n};\nmodule.exports = fetch;\nfetch.isRedirect = code => code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\nfetch.Headers = Headers;\nfetch.Request = Request;\nfetch.Response = Response;\nfetch.FetchError = FetchError;","map":{"version":3,"names":["Url","require","http","https","zlib","Minipass","Body","writeToStream","getTotalBytes","Response","Headers","createHeadersLenient","Request","getNodeRequestOptions","FetchError","AbortError","resolveUrl","resolve","fetch","url","opts","test","request","split","data","Buffer","from","type","match","Promise","headers","length","er","reject","method","message","options","send","protocol","signal","response","abort","error","isStream","body","destroy","emit","aborted","abortAndFinalize","finalize","req","removeEventListener","clearTimeout","reqTimeout","addEventListener","timeout","once","socket","setTimeout","on","res","isRedirect","statusCode","location","get","locationURL","redirect","set","err","counter","follow","parse","host","requestOpts","agent","compress","undefined","delete","chunk","write","end","responseOptions","status","statusText","statusMessage","size","trailer","trailers","codings","zlibOptions","flush","constants","Z_SYNC_FLUSH","finishFlush","unzip","Gunzip","pipe","raw","decoder","Inflate","InflateRaw","BrotliDecompress","module","exports","code"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/minipass-fetch/lib/index.js"],"sourcesContent":["'use strict'\nconst Url = require('url')\nconst http = require('http')\nconst https = require('https')\nconst zlib = require('minizlib')\nconst Minipass = require('minipass')\n\nconst Body = require('./body.js')\nconst { writeToStream, getTotalBytes } = Body\nconst Response = require('./response.js')\nconst Headers = require('./headers.js')\nconst { createHeadersLenient } = Headers\nconst Request = require('./request.js')\nconst { getNodeRequestOptions } = Request\nconst FetchError = require('./fetch-error.js')\nconst AbortError = require('./abort-error.js')\n\nconst resolveUrl = Url.resolve\n\nconst fetch = (url, opts) => {\n  if (/^data:/.test(url)) {\n    const request = new Request(url, opts)\n    try {\n      const split = url.split(',')\n      const data = Buffer.from(split[1], 'base64')\n      const type = split[0].match(/^data:(.*);base64$/)[1]\n      return Promise.resolve(new Response(data, {\n        headers: {\n          'Content-Type': type,\n          'Content-Length': data.length,\n        }\n      }))\n    } catch (er) {\n      return Promise.reject(new FetchError(`[${request.method}] ${\n        request.url} invalid URL, ${er.message}`, 'system', er))\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    // build request object\n    const request = new Request(url, opts)\n    let options\n    try {\n      options = getNodeRequestOptions(request)\n    } catch (er) {\n      return reject(er)\n    }\n\n    const send = (options.protocol === 'https:' ? https : http).request\n    const { signal } = request\n    let response = null\n    const abort = () => {\n      const error = new AbortError('The user aborted a request.')\n      reject(error)\n      if (Minipass.isStream(request.body) &&\n          typeof request.body.destroy === 'function') {\n        request.body.destroy(error)\n      }\n      if (response && response.body) {\n        response.body.emit('error', error)\n      }\n    }\n\n    if (signal && signal.aborted)\n      return abort()\n\n    const abortAndFinalize = () => {\n      abort()\n      finalize()\n    }\n\n    const finalize = () => {\n      req.abort()\n      if (signal)\n        signal.removeEventListener('abort', abortAndFinalize)\n      clearTimeout(reqTimeout)\n    }\n\n    // send request\n    const req = send(options)\n\n    if (signal)\n      signal.addEventListener('abort', abortAndFinalize)\n\n    let reqTimeout = null\n    if (request.timeout) {\n      req.once('socket', socket => {\n        reqTimeout = setTimeout(() => {\n          reject(new FetchError(`network timeout at: ${\n            request.url}`, 'request-timeout'))\n          finalize()\n        }, request.timeout)\n      })\n    }\n\n    req.on('error', er => {\n      // if a 'response' event is emitted before the 'error' event, then by the\n      // time this handler is run it's too late to reject the Promise for the\n      // response. instead, we forward the error event to the response stream\n      // so that the error will surface to the user when they try to consume\n      // the body. this is done as a side effect of aborting the request except\n      // for in windows, where we must forward the event manually, otherwise\n      // there is no longer a ref'd socket attached to the request and the\n      // stream never ends so the event loop runs out of work and the process\n      // exits without warning.\n      // coverage skipped here due to the difficulty in testing\n      // istanbul ignore next\n      if (req.res)\n        req.res.emit('error', er)\n      reject(new FetchError(`request to ${request.url} failed, reason: ${\n        er.message}`, 'system', er))\n      finalize()\n    })\n\n    req.on('response', res => {\n      clearTimeout(reqTimeout)\n\n      const headers = createHeadersLenient(res.headers)\n\n      // HTTP fetch step 5\n      if (fetch.isRedirect(res.statusCode)) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location')\n\n        // HTTP fetch step 5.3\n        const locationURL = location === null ? null\n          : resolveUrl(request.url, location)\n\n        // HTTP fetch step 5.5\n        switch (request.redirect) {\n          case 'error':\n            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${\n              request.url}`, 'no-redirect'))\n            finalize()\n            return\n\n          case 'manual':\n            // node-fetch-specific step: make manual redirect a bit easier to\n            // use by setting the Location header value to the resolved URL.\n            if (locationURL !== null) {\n              // handle corrupted header\n              try {\n                headers.set('Location', locationURL)\n              } catch (err) {\n                /* istanbul ignore next: nodejs server prevent invalid\n                   response headers, we can't test this through normal\n                   request */\n                reject(err)\n              }\n            }\n            break\n\n          case 'follow':\n            // HTTP-redirect fetch step 2\n            if (locationURL === null) {\n              break\n            }\n\n            // HTTP-redirect fetch step 5\n            if (request.counter >= request.follow) {\n              reject(new FetchError(`maximum redirect reached at: ${\n                request.url}`, 'max-redirect'))\n              finalize()\n              return\n            }\n\n            // HTTP-redirect fetch step 9\n            if (res.statusCode !== 303 &&\n                request.body &&\n                getTotalBytes(request) === null) {\n              reject(new FetchError(\n                'Cannot follow redirect with body being a readable stream',\n                'unsupported-redirect'\n              ))\n              finalize()\n              return\n            }\n\n            // Update host due to redirection\n            request.headers.set('host', Url.parse(locationURL).host)\n\n            // HTTP-redirect fetch step 6 (counter increment)\n            // Create a new Request object.\n            const requestOpts = {\n              headers: new Headers(request.headers),\n              follow: request.follow,\n              counter: request.counter + 1,\n              agent: request.agent,\n              compress: request.compress,\n              method: request.method,\n              body: request.body,\n              signal: request.signal,\n              timeout: request.timeout,\n            }\n\n            // HTTP-redirect fetch step 11\n            if (res.statusCode === 303 || (\n                (res.statusCode === 301 || res.statusCode === 302) &&\n                request.method === 'POST'\n            )) {\n              requestOpts.method = 'GET'\n              requestOpts.body = undefined\n              requestOpts.headers.delete('content-length')\n            }\n\n            // HTTP-redirect fetch step 15\n            resolve(fetch(new Request(locationURL, requestOpts)))\n            finalize()\n            return\n        }\n      } // end if(isRedirect)\n\n\n      // prepare response\n      res.once('end', () =>\n        signal && signal.removeEventListener('abort', abortAndFinalize))\n\n      const body = new Minipass()\n      // exceedingly rare that the stream would have an error,\n      // but just in case we proxy it to the stream in use.\n      res.on('error', /* istanbul ignore next */ er => body.emit('error', er))\n      res.on('data', (chunk) => body.write(chunk))\n      res.on('end', () => body.end())\n\n      const responseOptions = {\n        url: request.url,\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: headers,\n        size: request.size,\n        timeout: request.timeout,\n        counter: request.counter,\n        trailer: new Promise(resolve =>\n          res.on('end', () => resolve(createHeadersLenient(res.trailers))))\n      }\n\n      // HTTP-network fetch step 12.1.1.3\n      const codings = headers.get('Content-Encoding')\n\n      // HTTP-network fetch step 12.1.1.4: handle content codings\n\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n      if (!request.compress ||\n          request.method === 'HEAD' ||\n          codings === null ||\n          res.statusCode === 204 ||\n          res.statusCode === 304) {\n        response = new Response(body, responseOptions)\n        resolve(response)\n        return\n      }\n\n\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n      const zlibOptions = {\n        flush: zlib.constants.Z_SYNC_FLUSH,\n        finishFlush: zlib.constants.Z_SYNC_FLUSH,\n      }\n\n      // for gzip\n      if (codings == 'gzip' || codings == 'x-gzip') {\n        const unzip = new zlib.Gunzip(zlibOptions)\n        response = new Response(\n          // exceedingly rare that the stream would have an error,\n          // but just in case we proxy it to the stream in use.\n          body.on('error', /* istanbul ignore next */ er => unzip.emit('error', er)).pipe(unzip),\n          responseOptions\n        )\n        resolve(response)\n        return\n      }\n\n      // for deflate\n      if (codings == 'deflate' || codings == 'x-deflate') {\n        // handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = res.pipe(new Minipass())\n        raw.once('data', chunk => {\n          // see http://stackoverflow.com/questions/37519828\n          const decoder = (chunk[0] & 0x0F) === 0x08\n            ? new zlib.Inflate()\n            : new zlib.InflateRaw()\n          // exceedingly rare that the stream would have an error,\n          // but just in case we proxy it to the stream in use.\n          body.on('error', /* istanbul ignore next */ er => decoder.emit('error', er)).pipe(decoder)\n          response = new Response(decoder, responseOptions)\n          resolve(response)\n        })\n        return\n      }\n\n\n      // for br\n      if (codings == 'br') {\n        // ignoring coverage so tests don't have to fake support (or lack of) for brotli\n        // istanbul ignore next\n        try {\n          var decoder = new zlib.BrotliDecompress()\n        } catch (err) {\n          reject(err)\n          finalize()\n          return\n        }\n        // exceedingly rare that the stream would have an error,\n        // but just in case we proxy it to the stream in use.\n        body.on('error', /* istanbul ignore next */ er => decoder.emit('error', er)).pipe(decoder)\n        response = new Response(decoder, responseOptions)\n        resolve(response)\n        return\n      }\n\n      // otherwise, use response as-is\n      response = new Response(body, responseOptions)\n      resolve(response)\n    })\n\n    writeToStream(req, request)\n  })\n}\n\nmodule.exports = fetch\n\nfetch.isRedirect = code =>\n  code === 301 ||\n  code === 302 ||\n  code === 303 ||\n  code === 307 ||\n  code === 308\n\nfetch.Headers = Headers\nfetch.Request = Request\nfetch.Response = Response\nfetch.FetchError = FetchError\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}