{"ast":null,"code":"/* eslint-disable node/no-deprecated-api */\n\n'use strict';\n\nconst semver = require('semver');\nconst url = require('url');\nconst path = require('path');\nconst log = require('npmlog');\n\n// versions where -headers.tar.gz started shipping\nconst headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42';\nconst bitsre = /\\/win-(x86|x64|arm64)\\//;\nconst bitsreV3 = /\\/win-(x86|ia32|x64)\\//; // io.js v3.x.x shipped with \"ia32\" but should\n// have been \"x86\"\n\n// Captures all the logic required to determine download URLs, local directory and\n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\nfunction processRelease(argv, gyp, defaultVersion, defaultRelease) {\n  var version = semver.valid(argv[0]) && argv[0] || gyp.opts.target || defaultVersion;\n  var versionSemver = semver.parse(version);\n  var overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl;\n  var isDefaultVersion;\n  var isNamedForLegacyIojs;\n  var name;\n  var distBaseUrl;\n  var baseUrl;\n  var libUrl32;\n  var libUrl64;\n  var libUrlArm64;\n  var tarballUrl;\n  var canGetHeaders;\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return {\n      version: version\n    };\n  }\n  // flatten version into String\n  version = versionSemver.version;\n\n  // defaultVersion should come from process.version so ought to be valid semver\n  isDefaultVersion = version === semver.parse(defaultVersion).version;\n\n  // can't use process.release if we're using --target=x.y.z\n  if (!isDefaultVersion) {\n    defaultRelease = null;\n  }\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs'); // remove the '.' for directory naming purposes\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isNamedForLegacyIojs = versionSemver.major >= 1 && versionSemver.major < 4;\n    // isNamedForLegacyIojs is required to support Electron < 4 (in particular Electron 3)\n    // as previously this logic was used to ensure \"iojs\" was used to download iojs releases\n    // and \"node\" for node releases.  Unfortunately the logic was broad enough that electron@3\n    // published release assets as \"iojs\" so that the node-gyp logic worked.  Once Electron@3 has\n    // been EOL for a while (late 2019) we should remove this hack.\n    name = isNamedForLegacyIojs ? 'iojs' : 'node';\n  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR;\n  }\n  if (overrideDistUrl) {\n    log.verbose('download', 'using dist-url', overrideDistUrl);\n  }\n  if (overrideDistUrl) {\n    distBaseUrl = overrideDistUrl.replace(/\\/+$/, '');\n  } else {\n    distBaseUrl = 'https://nodejs.org/dist';\n  }\n  distBaseUrl += '/v' + version + '/';\n\n  // new style, based on process.release so we have a lot of the data we need\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './');\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major);\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major);\n    libUrlArm64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'arm64', versionSemver.major);\n    tarballUrl = defaultRelease.headersUrl;\n  } else {\n    // older versions without process.release are captured here and we have to make\n    // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n    // current process.release\n    baseUrl = distBaseUrl;\n    libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major);\n    libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major);\n    libUrlArm64 = resolveLibUrl(name, baseUrl, 'arm64', versionSemver.major);\n\n    // making the bold assumption that anything with a version number >3.0.0 will\n    // have a *-headers.tar.gz file in its dist location, even some frankenstein\n    // custom version\n    canGetHeaders = semver.satisfies(versionSemver, headersTarballRange);\n    tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz');\n  }\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    ia32: {\n      libUrl: libUrl32,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path))\n    },\n    x64: {\n      libUrl: libUrl64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    },\n    arm64: {\n      libUrl: libUrlArm64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrlArm64).path))\n    }\n  };\n}\nfunction normalizePath(p) {\n  return path.normalize(p).replace(/\\\\/g, '/');\n}\nfunction resolveLibUrl(name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './');\n  var hasLibUrl = bitsre.test(defaultUrl) || versionMajor === 3 && bitsreV3.test(defaultUrl);\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1) {\n      return url.resolve(base, 'win-' + arch + '/' + name + '.lib');\n    }\n    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n    return url.resolve(base, (arch === 'x86' ? '' : arch + '/') + name + '.lib');\n  }\n\n  // else we have a proper url to a .lib, just make sure it's the right arch\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/');\n}\nmodule.exports = processRelease;","map":{"version":3,"names":["semver","require","url","path","log","headersTarballRange","bitsre","bitsreV3","processRelease","argv","gyp","defaultVersion","defaultRelease","version","valid","opts","target","versionSemver","parse","overrideDistUrl","disturl","isDefaultVersion","isNamedForLegacyIojs","name","distBaseUrl","baseUrl","libUrl32","libUrl64","libUrlArm64","tarballUrl","canGetHeaders","replace","major","process","env","NODEJS_ORG_MIRROR","verbose","headersUrl","resolve","resolveLibUrl","libUrl","satisfies","shasumsUrl","versionDir","ia32","libPath","normalizePath","relative","x64","arm64","p","normalize","defaultUrl","arch","versionMajor","base","hasLibUrl","test","module","exports"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/node-gyp/lib/process-release.js"],"sourcesContent":["/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nconst semver = require('semver')\nconst url = require('url')\nconst path = require('path')\nconst log = require('npmlog')\n\n// versions where -headers.tar.gz started shipping\nconst headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42'\nconst bitsre = /\\/win-(x86|x64|arm64)\\//\nconst bitsreV3 = /\\/win-(x86|ia32|x64)\\// // io.js v3.x.x shipped with \"ia32\" but should\n// have been \"x86\"\n\n// Captures all the logic required to determine download URLs, local directory and\n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\nfunction processRelease (argv, gyp, defaultVersion, defaultRelease) {\n  var version = (semver.valid(argv[0]) && argv[0]) || gyp.opts.target || defaultVersion\n  var versionSemver = semver.parse(version)\n  var overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl\n  var isDefaultVersion\n  var isNamedForLegacyIojs\n  var name\n  var distBaseUrl\n  var baseUrl\n  var libUrl32\n  var libUrl64\n  var libUrlArm64\n  var tarballUrl\n  var canGetHeaders\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return { version: version }\n  }\n  // flatten version into String\n  version = versionSemver.version\n\n  // defaultVersion should come from process.version so ought to be valid semver\n  isDefaultVersion = version === semver.parse(defaultVersion).version\n\n  // can't use process.release if we're using --target=x.y.z\n  if (!isDefaultVersion) {\n    defaultRelease = null\n  }\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs') // remove the '.' for directory naming purposes\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isNamedForLegacyIojs = versionSemver.major >= 1 && versionSemver.major < 4\n    // isNamedForLegacyIojs is required to support Electron < 4 (in particular Electron 3)\n    // as previously this logic was used to ensure \"iojs\" was used to download iojs releases\n    // and \"node\" for node releases.  Unfortunately the logic was broad enough that electron@3\n    // published release assets as \"iojs\" so that the node-gyp logic worked.  Once Electron@3 has\n    // been EOL for a while (late 2019) we should remove this hack.\n    name = isNamedForLegacyIojs ? 'iojs' : 'node'\n  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl && process.env.NODEJS_ORG_MIRROR) {\n    overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n  }\n\n  if (overrideDistUrl) {\n    log.verbose('download', 'using dist-url', overrideDistUrl)\n  }\n\n  if (overrideDistUrl) {\n    distBaseUrl = overrideDistUrl.replace(/\\/+$/, '')\n  } else {\n    distBaseUrl = 'https://nodejs.org/dist'\n  }\n  distBaseUrl += '/v' + version + '/'\n\n  // new style, based on process.release so we have a lot of the data we need\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './')\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major)\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major)\n    libUrlArm64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'arm64', versionSemver.major)\n    tarballUrl = defaultRelease.headersUrl\n  } else {\n    // older versions without process.release are captured here and we have to make\n    // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n    // current process.release\n    baseUrl = distBaseUrl\n    libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major)\n    libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major)\n    libUrlArm64 = resolveLibUrl(name, baseUrl, 'arm64', versionSemver.major)\n\n    // making the bold assumption that anything with a version number >3.0.0 will\n    // have a *-headers.tar.gz file in its dist location, even some frankenstein\n    // custom version\n    canGetHeaders = semver.satisfies(versionSemver, headersTarballRange)\n    tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz')\n  }\n\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    ia32: {\n      libUrl: libUrl32,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path))\n    },\n    x64: {\n      libUrl: libUrl64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    },\n    arm64: {\n      libUrl: libUrlArm64,\n      libPath: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrlArm64).path))\n    }\n  }\n}\n\nfunction normalizePath (p) {\n  return path.normalize(p).replace(/\\\\/g, '/')\n}\n\nfunction resolveLibUrl (name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './')\n  var hasLibUrl = bitsre.test(defaultUrl) || (versionMajor === 3 && bitsreV3.test(defaultUrl))\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1) {\n      return url.resolve(base, 'win-' + arch + '/' + name + '.lib')\n    }\n    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n    return url.resolve(base, (arch === 'x86' ? '' : arch + '/') + name + '.lib')\n  }\n\n  // else we have a proper url to a .lib, just make sure it's the right arch\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/')\n}\n\nmodule.exports = processRelease\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}