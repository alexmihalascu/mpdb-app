{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\nconst path = require('path');\nconst log = require('npmlog');\nconst os = require('os');\nconst processRelease = require('./process-release');\nconst win = process.platform === 'win32';\nconst findNodeDirectory = require('./find-node-directory');\nconst createConfigGypi = require('./create-config-gypi');\nconst msgFormat = require('util').format;\nvar findPython = require('./find-python');\nif (win) {\n  var findVisualStudio = require('./find-visualstudio');\n}\nfunction configure(gyp, argv, callback) {\n  var python;\n  var buildDir = path.resolve('build');\n  var configNames = ['config.gypi', 'common.gypi'];\n  var configs = [];\n  var nodeDir;\n  var release = processRelease(argv, gyp, process.version, process.release);\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err);\n    } else {\n      python = found;\n      getNodeDir();\n    }\n  });\n  function getNodeDir() {\n    // 'python' should be set by now\n    process.env.PYTHON = python;\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir());\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir);\n      createBuildDir();\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version);\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version);\n      }\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version));\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = !gyp.opts.tarball;\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err);\n        }\n        log.verbose('get node dir', 'target node version installed:', release.versionDir);\n        nodeDir = path.resolve(gyp.devDir, release.versionDir);\n        createBuildDir();\n      });\n    }\n  }\n  function createBuildDir() {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir);\n    fs.mkdir(buildDir, {\n      recursive: true\n    }, function (err, isNew) {\n      if (err) {\n        return callback(err);\n      }\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew ? 'Yes' : 'No');\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version, createConfigFile);\n      } else {\n        createConfigFile();\n      }\n    });\n  }\n  function createConfigFile(err, vsInfo) {\n    if (err) {\n      return callback(err);\n    }\n    if (process.platform === 'win32') {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015);\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path;\n    }\n    createConfigGypi({\n      gyp,\n      buildDir,\n      nodeDir,\n      vsInfo\n    }).then(configPath => {\n      configs.push(configPath);\n      findConfigs();\n    }).catch(err => {\n      callback(err);\n    });\n  }\n  function findConfigs() {\n    var name = configNames.shift();\n    if (!name) {\n      return runGyp();\n    }\n    var fullPath = path.resolve(name);\n    log.verbose(name, 'checking for gypi file: %s', fullPath);\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs(); // check next gypi filename\n        } else {\n          callback(err);\n        }\n      } else {\n        log.verbose(name, 'found gypi file');\n        configs.push(fullPath);\n        findConfigs();\n      }\n    });\n  }\n  function runGyp(err) {\n    if (err) {\n      return callback(err);\n    }\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"');\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs');\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"');\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make');\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config);\n    });\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n    var nodeExpFile;\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x';\n      var nodeRootDir = findNodeDirectory();\n      var candidates;\n      if (process.platform === 'aix') {\n        candidates = ['include/node/node', 'out/Release/node', 'out/Debug/node', 'node'].map(function (file) {\n          return file + '.' + ext;\n        });\n      } else {\n        candidates = ['out/Release/obj.target/libnode', 'out/Debug/obj.target/libnode', 'lib/libnode'].map(function (file) {\n          return file + '.' + ext;\n        });\n      }\n      var logprefix = 'find exports file';\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates);\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile);\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir);\n        log.error(logprefix, 'Could not find exports file');\n        return callback(new Error(msg));\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py');\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi');\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi');\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi');\n      }\n      var outputDir = 'build';\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir;\n      }\n      var nodeGypDir = path.resolve(__dirname, '..');\n      var nodeLibFile = path.join(nodeDir, !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)', release.name + '.lib');\n      argv.push('-I', addonGypi);\n      argv.push('-I', commonGypi);\n      argv.push('-Dlibrary=shared_library');\n      argv.push('-Dvisibility=default');\n      argv.push('-Dnode_root_dir=' + nodeDir);\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile);\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir);\n\n      // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\');\n      }\n      argv.push('-Dnode_lib_file=' + nodeLibFile);\n      argv.push('-Dmodule_root_dir=' + process.cwd());\n      argv.push('-Dnode_engine=' + (gyp.opts.node_engine || process.jsEngine || 'v8'));\n      argv.push('--depth=.');\n      argv.push('--no-parallel');\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', outputDir);\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.');\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp');\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gypScript);\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')];\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH);\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':');\n      var cp = gyp.spawn(python, argv);\n      cp.on('exit', onCpExit);\n    });\n  }\n  function onCpExit(code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code));\n    } else {\n      // we're done\n      callback();\n    }\n  }\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync(logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next]);\n    try {\n      var fd = fs.openSync(candidate, 'r');\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message);\n      continue;\n    }\n    fs.closeSync(fd);\n    log.silly(logprefix, 'Found readable %s', candidate);\n    return candidate;\n  }\n  return undefined;\n}\nmodule.exports = configure;\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n};\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module';","map":{"version":3,"names":["fs","require","path","log","os","processRelease","win","process","platform","findNodeDirectory","createConfigGypi","msgFormat","format","findPython","findVisualStudio","configure","gyp","argv","callback","python","buildDir","resolve","configNames","configs","nodeDir","release","version","opts","err","found","getNodeDir","env","PYTHON","nodedir","replace","homedir","verbose","createBuildDir","semver","Error","ensure","tarball","commands","install","versionDir","devDir","mkdir","recursive","isNew","msvs_version","createConfigFile","vsInfo","GYP_MSVS_VERSION","Math","min","versionYear","GYP_MSVS_OVERRIDE_PATH","then","configPath","push","findConfigs","catch","name","shift","runGyp","fullPath","stat","code","indexOf","forEach","config","nodeExpFile","ext","nodeRootDir","candidates","map","file","logprefix","findAccessibleSync","undefined","msg","error","gypScript","__dirname","addonGypi","commonGypi","outputDir","nodeGypDir","nodeLibFile","join","cwd","node_engine","jsEngine","unshift","pypath","PYTHONPATH","cp","spawn","on","onCpExit","dir","next","length","candidate","fd","openSync","e","silly","message","closeSync","module","exports","test","usage"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/node-gyp/lib/configure.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst log = require('npmlog')\nconst os = require('os')\nconst processRelease = require('./process-release')\nconst win = process.platform === 'win32'\nconst findNodeDirectory = require('./find-node-directory')\nconst createConfigGypi = require('./create-config-gypi')\nconst msgFormat = require('util').format\nvar findPython = require('./find-python')\nif (win) {\n  var findVisualStudio = require('./find-visualstudio')\n}\n\nfunction configure (gyp, argv, callback) {\n  var python\n  var buildDir = path.resolve('build')\n  var configNames = ['config.gypi', 'common.gypi']\n  var configs = []\n  var nodeDir\n  var release = processRelease(argv, gyp, process.version, process.release)\n\n  findPython(gyp.opts.python, function (err, found) {\n    if (err) {\n      callback(err)\n    } else {\n      python = found\n      getNodeDir()\n    }\n  })\n\n  function getNodeDir () {\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, os.homedir())\n\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n      createBuildDir()\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version))\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = !gyp.opts.tarball\n\n      gyp.commands.install([release.version], function (err) {\n        if (err) {\n          return callback(err)\n        }\n        log.verbose('get node dir', 'target node version installed:', release.versionDir)\n        nodeDir = path.resolve(gyp.devDir, release.versionDir)\n        createBuildDir()\n      })\n    }\n  }\n\n  function createBuildDir () {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir)\n    fs.mkdir(buildDir, { recursive: true }, function (err, isNew) {\n      if (err) {\n        return callback(err)\n      }\n      log.verbose(\n        'build dir', '\"build\" dir needed to be created?', isNew ? 'Yes' : 'No'\n      )\n      if (win) {\n        findVisualStudio(release.semver, gyp.opts.msvs_version,\n          createConfigFile)\n      } else {\n        createConfigFile()\n      }\n    })\n  }\n\n  function createConfigFile (err, vsInfo) {\n    if (err) {\n      return callback(err)\n    }\n    if (process.platform === 'win32') {\n      process.env.GYP_MSVS_VERSION = Math.min(vsInfo.versionYear, 2015)\n      process.env.GYP_MSVS_OVERRIDE_PATH = vsInfo.path\n    }\n    createConfigGypi({ gyp, buildDir, nodeDir, vsInfo }).then(configPath => {\n      configs.push(configPath)\n      findConfigs()\n    }).catch(err => {\n      callback(err)\n    })\n  }\n\n  function findConfigs () {\n    var name = configNames.shift()\n    if (!name) {\n      return runGyp()\n    }\n    var fullPath = path.resolve(name)\n\n    log.verbose(name, 'checking for gypi file: %s', fullPath)\n    fs.stat(fullPath, function (err) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          findConfigs() // check next gypi filename\n        } else {\n          callback(err)\n        }\n      } else {\n        log.verbose(name, 'found gypi file')\n        configs.push(fullPath)\n        findConfigs()\n      }\n    })\n  }\n\n  function runGyp (err) {\n    if (err) {\n      return callback(err)\n    }\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs')\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make')\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config)\n    })\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking.\n    var nodeExpFile\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x'\n      var nodeRootDir = findNodeDirectory()\n      var candidates\n\n      if (process.platform === 'aix') {\n        candidates = [\n          'include/node/node',\n          'out/Release/node',\n          'out/Debug/node',\n          'node'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      } else {\n        candidates = [\n          'out/Release/obj.target/libnode',\n          'out/Debug/obj.target/libnode',\n          'lib/libnode'\n        ].map(function (file) {\n          return file + '.' + ext\n        })\n      }\n\n      var logprefix = 'find exports file'\n      nodeExpFile = findAccessibleSync(logprefix, nodeRootDir, candidates)\n      if (nodeExpFile !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', nodeExpFile)\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, nodeRootDir)\n        log.error(logprefix, 'Could not find exports file')\n        return callback(new Error(msg))\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gypScript = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py')\n    var addonGypi = path.resolve(__dirname, '..', 'addon.gypi')\n    var commonGypi = path.resolve(nodeDir, 'include/node/common.gypi')\n    fs.stat(commonGypi, function (err) {\n      if (err) {\n        commonGypi = path.resolve(nodeDir, 'common.gypi')\n      }\n\n      var outputDir = 'build'\n      if (win) {\n        // Windows expects an absolute path\n        outputDir = buildDir\n      }\n      var nodeGypDir = path.resolve(__dirname, '..')\n\n      var nodeLibFile = path.join(nodeDir,\n        !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)',\n        release.name + '.lib')\n\n      argv.push('-I', addonGypi)\n      argv.push('-I', commonGypi)\n      argv.push('-Dlibrary=shared_library')\n      argv.push('-Dvisibility=default')\n      argv.push('-Dnode_root_dir=' + nodeDir)\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + nodeExpFile)\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n\n      // Do this to keep Cygwin environments happy, else the unescaped '\\' gets eaten up,\n      // resulting in bad paths, Ex c:parentFolderfolderanotherFolder instead of c:\\parentFolder\\folder\\anotherFolder\n      if (win) {\n        nodeLibFile = nodeLibFile.replace(/\\\\/g, '\\\\\\\\')\n      }\n      argv.push('-Dnode_lib_file=' + nodeLibFile)\n      argv.push('-Dmodule_root_dir=' + process.cwd())\n      argv.push('-Dnode_engine=' +\n        (gyp.opts.node_engine || process.jsEngine || 'v8'))\n      argv.push('--depth=.')\n      argv.push('--no-parallel')\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', outputDir)\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.')\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp')\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gypScript)\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH)\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n      var cp = gyp.spawn(python, argv)\n      cp.on('exit', onCpExit)\n    })\n  }\n\n  function onCpExit (code) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code))\n    } else {\n      // we're done\n      callback()\n    }\n  }\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync (logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next])\n    try {\n      var fd = fs.openSync(candidate, 'r')\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message)\n      continue\n    }\n    fs.closeSync(fd)\n    log.silly(logprefix, 'Found readable %s', candidate)\n    return candidate\n  }\n\n  return undefined\n}\n\nmodule.exports = configure\nmodule.exports.test = {\n  findAccessibleSync: findAccessibleSync\n}\nmodule.exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module'\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}