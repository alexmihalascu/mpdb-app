{"ast":null,"code":"'use strict';\n\nconst util = require('util');\nconst fs = require('fs');\nconst fsm = require('fs-minipass');\nconst ssri = require('ssri');\nconst contentPath = require('./path');\nconst Pipeline = require('minipass-pipeline');\nconst lstat = util.promisify(fs.lstat);\nconst readFile = util.promisify(fs.readFile);\nmodule.exports = read;\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024;\nfunction read(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    // get size\n    return lstat(cpath).then(stat => ({\n      stat,\n      cpath,\n      sri\n    }));\n  }).then(_ref => {\n    let {\n      stat,\n      cpath,\n      sri\n    } = _ref;\n    if (typeof size === 'number' && stat.size !== size) throw sizeError(size, stat.size);\n    if (stat.size > MAX_SINGLE_READ_SIZE) return readPipeline(cpath, stat.size, sri, new Pipeline()).concat();\n    return readFile(cpath, null).then(data => {\n      if (!ssri.checkData(data, sri)) throw integrityError(sri, cpath);\n      return data;\n    });\n  });\n}\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(new fsm.ReadStream(cpath, {\n    size,\n    readSize: MAX_SINGLE_READ_SIZE\n  }), ssri.integrityStream({\n    integrity: sri,\n    size\n  }));\n  return stream;\n};\nmodule.exports.sync = readSync;\nfunction readSync(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath);\n    if (typeof size === 'number' && size !== data.length) throw sizeError(size, data.length);\n    if (ssri.checkData(data, sri)) return data;\n    throw integrityError(sri, cpath);\n  });\n}\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\nfunction readStream(cache, integrity) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    size\n  } = opts;\n  const stream = new Pipeline();\n  withContentSri(cache, integrity, (cpath, sri) => {\n    // just lstat to ensure it exists\n    return lstat(cpath).then(stat => ({\n      stat,\n      cpath,\n      sri\n    }));\n  }).then(_ref2 => {\n    let {\n      stat,\n      cpath,\n      sri\n    } = _ref2;\n    if (typeof size === 'number' && size !== stat.size) return stream.emit('error', sizeError(size, stat.size));\n    readPipeline(cpath, stat.size, sri, stream);\n  }, er => stream.emit('error', er));\n  return stream;\n}\nlet copyFile;\nif (fs.copyFile) {\n  module.exports.copy = copy;\n  module.exports.copy.sync = copySync;\n  copyFile = util.promisify(fs.copyFile);\n}\nfunction copy(cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFile(cpath, dest);\n  });\n}\nfunction copySync(cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\nmodule.exports.hasContent = hasContent;\nfunction hasContent(cache, integrity) {\n  if (!integrity) return Promise.resolve(false);\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstat(cpath).then(stat => ({\n      size: stat.size,\n      sri,\n      stat\n    }));\n  }).catch(err => {\n    if (err.code === 'ENOENT') return false;\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32') throw err;else return false;\n    }\n  });\n}\nmodule.exports.hasContent.sync = hasContentSync;\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) return false;\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') return false;\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32') throw err;else return false;\n      }\n    }\n  });\n}\nfunction withContentSri(cache, integrity, fn) {\n  const tryFn = () => {\n    const sri = ssri.parse(integrity);\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise.all(digests.map(meta => {\n        return withContentSri(cache, meta, fn).catch(err => {\n          if (err.code === 'ENOENT') {\n            return Object.assign(new Error('No matching content found for ' + sri.toString()), {\n              code: 'ENOENT'\n            });\n          }\n          return err;\n        });\n      })).then(results => {\n        // Return the first non error if it is found\n        const result = results.find(r => !(r instanceof Error));\n        if (result) return result;\n\n        // Throw the No matching content found error\n        const enoentError = results.find(r => r.code === 'ENOENT');\n        if (enoentError) throw enoentError;\n\n        // Throw generic error\n        throw results.find(r => r instanceof Error);\n      });\n    }\n  };\n  return new Promise((resolve, reject) => {\n    try {\n      tryFn().then(resolve).catch(reject);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity);\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n    throw lastErr;\n  }\n}\nfunction sizeError(expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`);\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\nfunction integrityError(sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`);\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":{"version":3,"names":["util","require","fs","fsm","ssri","contentPath","Pipeline","lstat","promisify","readFile","module","exports","read","MAX_SINGLE_READ_SIZE","cache","integrity","opts","size","withContentSri","cpath","sri","then","stat","sizeError","readPipeline","concat","data","checkData","integrityError","stream","push","ReadStream","readSize","integrityStream","sync","readSync","withContentSriSync","readFileSync","length","readStream","emit","er","copyFile","copy","copySync","dest","copyFileSync","hasContent","Promise","resolve","catch","err","code","process","platform","hasContentSync","lstatSync","fn","tryFn","parse","algo","pickAlgorithm","digests","all","map","meta","Object","assign","Error","toString","results","result","find","r","enoentError","reject","lastErr","expected","found","path"],"sources":["/Users/alexmihalascu/Desktop/mpdb-app/node_modules/cacache/lib/content/read.js"],"sourcesContent":["'use strict'\n\nconst util = require('util')\n\nconst fs = require('fs')\nconst fsm = require('fs-minipass')\nconst ssri = require('ssri')\nconst contentPath = require('./path')\nconst Pipeline = require('minipass-pipeline')\n\nconst lstat = util.promisify(fs.lstat)\nconst readFile = util.promisify(fs.readFile)\n\nmodule.exports = read\n\nconst MAX_SINGLE_READ_SIZE = 64 * 1024 * 1024\nfunction read (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    // get size\n    return lstat(cpath).then(stat => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && stat.size !== size)\n      throw sizeError(size, stat.size)\n\n    if (stat.size > MAX_SINGLE_READ_SIZE)\n      return readPipeline(cpath, stat.size, sri, new Pipeline()).concat()\n\n    return readFile(cpath, null).then((data) => {\n      if (!ssri.checkData(data, sri))\n        throw integrityError(sri, cpath)\n\n      return data\n    })\n  })\n}\n\nconst readPipeline = (cpath, size, sri, stream) => {\n  stream.push(\n    new fsm.ReadStream(cpath, {\n      size,\n      readSize: MAX_SINGLE_READ_SIZE,\n    }),\n    ssri.integrityStream({\n      integrity: sri,\n      size,\n    })\n  )\n  return stream\n}\n\nmodule.exports.sync = readSync\n\nfunction readSync (cache, integrity, opts = {}) {\n  const { size } = opts\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath)\n    if (typeof size === 'number' && size !== data.length)\n      throw sizeError(size, data.length)\n\n    if (ssri.checkData(data, sri))\n      return data\n\n    throw integrityError(sri, cpath)\n  })\n}\n\nmodule.exports.stream = readStream\nmodule.exports.readStream = readStream\n\nfunction readStream (cache, integrity, opts = {}) {\n  const { size } = opts\n  const stream = new Pipeline()\n  withContentSri(cache, integrity, (cpath, sri) => {\n    // just lstat to ensure it exists\n    return lstat(cpath).then((stat) => ({ stat, cpath, sri }))\n  }).then(({ stat, cpath, sri }) => {\n    if (typeof size === 'number' && size !== stat.size)\n      return stream.emit('error', sizeError(size, stat.size))\n\n    readPipeline(cpath, stat.size, sri, stream)\n  }, er => stream.emit('error', er))\n\n  return stream\n}\n\nlet copyFile\nif (fs.copyFile) {\n  module.exports.copy = copy\n  module.exports.copy.sync = copySync\n  copyFile = util.promisify(fs.copyFile)\n}\n\nfunction copy (cache, integrity, dest) {\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFile(cpath, dest)\n  })\n}\n\nfunction copySync (cache, integrity, dest) {\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest)\n  })\n}\n\nmodule.exports.hasContent = hasContent\n\nfunction hasContent (cache, integrity) {\n  if (!integrity)\n    return Promise.resolve(false)\n\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstat(cpath).then((stat) => ({ size: stat.size, sri, stat }))\n  }).catch((err) => {\n    if (err.code === 'ENOENT')\n      return false\n\n    if (err.code === 'EPERM') {\n      /* istanbul ignore else */\n      if (process.platform !== 'win32')\n        throw err\n      else\n        return false\n    }\n  })\n}\n\nmodule.exports.hasContent.sync = hasContentSync\n\nfunction hasContentSync (cache, integrity) {\n  if (!integrity)\n    return false\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath)\n      return { size: stat.size, sri, stat }\n    } catch (err) {\n      if (err.code === 'ENOENT')\n        return false\n\n      if (err.code === 'EPERM') {\n        /* istanbul ignore else */\n        if (process.platform !== 'win32')\n          throw err\n        else\n          return false\n      }\n    }\n  })\n}\n\nfunction withContentSri (cache, integrity, fn) {\n  const tryFn = () => {\n    const sri = ssri.parse(integrity)\n    // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n    const algo = sri.pickAlgorithm()\n    const digests = sri[algo]\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0])\n      return fn(cpath, digests[0])\n    } else {\n      // Can't use race here because a generic error can happen before\n      // a ENOENT error, and can happen before a valid result\n      return Promise\n        .all(digests.map((meta) => {\n          return withContentSri(cache, meta, fn)\n            .catch((err) => {\n              if (err.code === 'ENOENT') {\n                return Object.assign(\n                  new Error('No matching content found for ' + sri.toString()),\n                  { code: 'ENOENT' }\n                )\n              }\n              return err\n            })\n        }))\n        .then((results) => {\n          // Return the first non error if it is found\n          const result = results.find((r) => !(r instanceof Error))\n          if (result)\n            return result\n\n          // Throw the No matching content found error\n          const enoentError = results.find((r) => r.code === 'ENOENT')\n          if (enoentError)\n            throw enoentError\n\n          // Throw generic error\n          throw results.find((r) => r instanceof Error)\n        })\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    try {\n      tryFn()\n        .then(resolve)\n        .catch(reject)\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n\nfunction withContentSriSync (cache, integrity, fn) {\n  const sri = ssri.parse(integrity)\n  // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n  const algo = sri.pickAlgorithm()\n  const digests = sri[algo]\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0])\n    return fn(cpath, digests[0])\n  } else {\n    let lastErr = null\n    for (const meta of digests) {\n      try {\n        return withContentSriSync(cache, meta, fn)\n      } catch (err) {\n        lastErr = err\n      }\n    }\n    throw lastErr\n  }\n}\n\nfunction sizeError (expected, found) {\n  const err = new Error(`Bad data size: expected inserted data to be ${expected} bytes, but got ${found} instead`)\n  err.expected = expected\n  err.found = found\n  err.code = 'EBADSIZE'\n  return err\n}\n\nfunction integrityError (sri, path) {\n  const err = new Error(`Integrity verification failed for ${sri} (${path})`)\n  err.code = 'EINTEGRITY'\n  err.sri = sri\n  err.path = path\n  return err\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}